<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[笔记仓库]]></title>
  <link href="http://note.ptzzy.top/atom.xml" rel="self"/>
  <link href="http://note.ptzzy.top/"/>
  <updated>2017-09-13T23:03:54+08:00</updated>
  <id>http://note.ptzzy.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[卅七、zabbix自主监控与分布式监控]]></title>
    <link href="http://note.ptzzy.top/15053046720339.html"/>
    <updated>2017-09-13T20:11:12+08:00</updated>
    <id>http://note.ptzzy.top/15053046720339.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>被动模式：服务端主动去客户端抓取数据，站在客户端的立场，是被抓了数据，所以叫被动模式。</p>

<p>主动模式：客户端主动把数据发送给服务端 《==》自动注册</p>
</blockquote>

<ol>
<li><p>自动发现 </p>

<p>原理：Zabbix Server固定周期去全网（局域网）扫描，如果发现某台主机不在自己的监控主机中，那么他会将这台主机添加进来。 被动模式</p>

<ol>
<li><p>客户端布置</p>

<p>所有客户端需要做的事情<br/>
前提：客户端能被服务端找到，第一个是机器在同一局域网，第二个是客户端的配置文件指定“Server=服务端IP”</p>

<pre><code>[root@web01 ~]# ping 172.16.1.61
PING 172.16.1.61 (172.16.1.61) 56(84) bytes of data.
64 bytes from 172.16.1.61: icmp_seq=1 ttl=64 time=2.39 ms
</code></pre>

<p>更改客户端配置文件</p>

<pre><code>[root@web01 ~]# sed -i &#39;s#ServerActive=127.0.0.1#ServerActive=172.16.1.61#g&#39; /etc/zabbix/zabbix_agentd.conf
[root@web01 ~]# grep ^Server= /etc/zabbix/zabbix_agentd.conf
Server=172.16.1.61
</code></pre></li>
<li><p>服务端检测服务是否正常</p>

<p>服务端的命令行的Zabbix Server进程要正常工作</p>

<pre><code>[root@m01 ~]# /etc/init.d/zabbix-server status
zabbix_server (pid  38640) is running...
</code></pre></li>
<li><p>网页配置</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/53270416.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/44858859.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/57803556.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/76739842.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/7895197.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/95726366.jpg" alt=""/></p></li>
</ol></li>
<li><p>自动注册</p>

<p>自动发现是服务端去主动找客户端，比较费劲。<br/>
自动注册：客户端自己主动跑到服务端，说，我是新来的，请多关照（监控）</p>

<ol>
<li><p>客户端开启主动模式</p>

<pre><code>[root@web01 ~]# vim /etc/zabbix/zabbix_agentd.conf
Server=172.16.1.61  ===》 被动模式参数
ServerActive=127.0.0.1 ===》 主动模式参数
Hostname=Zabbix server  ===》 自动注册需要告诉服务端自己的主机名
HostMetadataItem=system.uname   ===》 作为server区分客户端的标志
</code></pre>

<p>客户端两步操作</p>

<pre><code>sed -i &#39;s#ServerActive=127.0.0.1#ServerActive=172.16.1.61#g;s#Hostname=Zabbix server#Hostname=web01#;176a HostMetadataItem=system.uname&#39; /etc/zabbix/zabbix_agentd.conf
</code></pre>

<p>重启客户端</p>

<pre><code>/etc/init.d/zabbix-agent restart
</code></pre></li>
<li><p>网页实现自动注册</p>

<p>先把自动发现功能禁用</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/52062377.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/11309909.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/52583684.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/29432115.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/49548437.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/10158818.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/61672884.jpg" alt=""/></p></li>
<li><p>小结</p>

<ol>
<li>工作中，只选自动发现或自动注册两者之一</li>
<li>如果选择自动发现时，客户端配置就是正常配置，需要的操作是在网页开启2处功能，第一处是“配置--自动发现”，第二处是“配置--动作--自动发现”</li>
<li>如果选择自动注册时，客户端需要额外添加三个配置，ServerActive，Hostname（注意，每台主机的主机名不一样），HostMetadataItem；然后在网页上“配置--动作--自动注册”</li>
</ol></li>
</ol></li>
<li><p>分布式监控</p>

<ol>
<li><p>分布式</p>

<p>① 分担压力，负载均衡<br/><br/>
② 由于地理位置分开（北京，上海，广州各有一个机房），分布式为了减轻每个机房压力。然后还能提高访问效率。比如广州用户只需要访问广州机房即可。</p></li>
<li><p>zabbix为什么需要用到分布式</p>

<p>① 分担server端的压力，比如需要监控的主机上千台，此时server压力山大<br/><br/>
② server只能够监控同一个局域网的主机，如果我们很多机房，每个机房的网络都是独立，可以使用vpn技术或者专线是每个机房的网络打通。所以最经济的方法是使用zabbix提供的分布式功能。</p></li>
<li><p>环境统一（3台）</p>

<blockquote>
<p>Zabbix Server--m01<br/>
公网:10.0.0.61<br/>
内网：172.16.1.61</p>
</blockquote>

<blockquote>
<p>Zabbix Proxy--web01<br/>
公网：10.0.0.8<br/>
内网：192.168.1.8</p>
</blockquote>

<blockquote>
<p>proxy-agent -- db01<br/>
内网：192.168.1.51<br/>
（公网：10.0.0.51）</p>
</blockquote>

<p>配置LAN区段</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/72163034.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/77169734.jpg" alt=""/></p></li>
<li><p>host解析统一</p>

<pre><code>[root@m01 ~]# grep web01 /etc/hosts
10.0.0.8      web01
</code></pre>

<pre><code>[root@web01 ~]# egrep &#39;^192|^10&#39; /etc/hosts
192.168.1.8      web01
192.168.1.51     db01 db01.etiantian.org
10.0.0.61     m01
</code></pre>

<pre><code>[root@db01 ~]# grep &#39;^192&#39; /etc/hosts
192.168.1.8      web01
192.168.1.51     db01 db01.etiantian.org
</code></pre></li>
<li><p>安装zabbix proxy（在Zabbix Proxy--web01上操作）<br/>
正常安装方法：</p>

<pre><code>rpm -ivh http://repo.zabbix.com/zabbix/3.0/rhel/6/x86_64/zabbix-release-3.0-1.el6.noarch.rpm
yum -y install zabbix-proxy-mysql 
</code></pre>

<p>网络不好的解决方法：<br/>
阿里云公网</p>

<pre><code>wget https://mirrors.aliyun.com/zabbix/zabbix/3.0/rhel/6/x86_64/zabbix-proxy-mysql-3.0.9-1.el6.x86_64.rpm
yum localinstall zabbix-proxy-mysql-3.0.9-1.el6.x86_64.rpm
</code></pre>

<p>学校仓库</p>

<pre><code>wget  http://192.168.14.200/zabbix/zabbix/3.0/rhel/6/x86_64/zabbix-proxy-mysql-3.0.9-1.el6.x86_64.rpm
yum localinstall zabbix-proxy-mysql-3.0.9-1.el6.x86_64.rpm
</code></pre>

<pre><code># 使用内网仓库
echo &quot;192.168.14.200 mirrors.aliyun.com&quot; &gt;&gt;/etc/hosts
# 配置yum源
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo
wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo
</code></pre></li>
<li><p>安装MySQL<br/>
zabbix proxy需要数据库。但是proxy不会再数据库存数据</p>

<pre><code>[root@web01 ~]# yum -y install mysql-server
[root@web01 ~]# /etc/init.d/mysqld start
# 创建数据库
[root@web01 ~]# mysql -e &quot;create database zabbix_proxy character set utf8 collate utf8_bin;&quot;
# 授权及设置密码
[root@web01 ~]# mysql -e &quot;grant all privileges on zabbix_proxy.* to zabbix@&#39;localhost&#39; identified by &#39;zabbix&#39;;&quot;
# 导入sql文件
[root@web01 ~]# zcat /usr/share/doc/zabbix-proxy-mysql-3.0.9/schema.sql.gz |mysql -uzabbix -pzabbix zabbix_proxy
</code></pre></li>
<li><p>web01配置proxy</p>

<pre><code>sed -i &#39;s#Server=127.0.0.1#Server=10.0.0.61#;s#Hostname=Zabbix proxy#Hostname=web01#;155a DBPassword=zabbix&#39; /etc/zabbix/zabbix_proxy.conf
</code></pre></li>
<li><p>启动proxy</p>

<pre><code>/etc/init.d/zabbix-proxy start
</code></pre></li>
<li><p>将web01通过proxy监控起来<br/>
修改zabbix_agent配置文件</p>

<pre><code>[root@web01 ~]# sed -i &#39;s#172.16.1.61#192.168.1.8#&#39; /etc/zabbix/zabbix_agentd.conf
[root@web01 ~]# /etc/init.d/zabbix-agent restart
</code></pre></li>
<li><p>将db01通过proxy监控起来<br/>
修改zabbix_agent配置文件<br/>
<code><br/>
[root@db01 ~]# sed -i &#39;s#172.16.1.61#192.168.1.8#&#39; /etc/zabbix/zabbix_agentd.conf<br/>
[root@db01 ~]# /etc/init.d/zabbix-agent restart<br/>
</code></p></li>
<li><p>网页配置</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/19633410.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/34014924.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/18053578.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/83453635.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/48119909.jpg" alt=""/></p></li>
</ol></li>
<li><p>SNMP监控</p>

<p>前面讲的都是属于zabbix客户端监控方式，这种监控方式的特色：每一台机器都得装agent。</p>

<p>但是我们的交换机，<mark>路由器等智能设备无法安装agent</mark>。<br/>
但是我们有监控需求！</p>

<p><mark>zabbix提供另外一种方法，帮助我们监控那些无法安装agent的设备。<br/>
这种方法叫做SNMP监控，SNMP==simple network manager protocol 简单网络管理协议</mark></p>

<ol>
<li><p>安装SNMP服务</p>

<p>用学校的仓库下载 <mark>生产环境中用阿里云的源下载 wget -O</mark></p>

<pre><code>[root@db01 ~]# echo &quot;192.168.14.200 mirrors.aliyun.com&quot; &gt;&gt;/etc/hosts
[root@db01 ~]# yum -y install net-snmp net-snmp-utils
</code></pre></li>
<li><p>配置snmp</p>

<pre><code>sed -i.ori &#39;57a view systemview   included  .1&#39; /etc/snmp/snmpd.conf
/etc/init.d/snmpd start
</code></pre></li>
<li><p>使用SNMP</p>

<pre><code>[root@db01 ~]# snmpwalk -v 2c -c public 127.0.0.1 sysname
SNMPv2-MIB::sysName.0 = STRING: db01
</code></pre>

<p>-v 指定当前使用snmp协议的版本号，2c就是版本号，snmp有三个版本 v1 v2 v3(需要认证)<br/>
-c 指定团体号（暗号）<br/>
sysname 理解为key</p>

<p>常用/通用的key值：<a href="http://www.ttlsa.com/monitor/snmp-oid/">http://www.ttlsa.com/monitor/snmp-oid/</a></p></li>
<li><p>网页配置</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/12510597.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/58966681.jpg" alt=""/></p></li>
</ol></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卅六、zabbix自定义监控]]></title>
    <link href="http://note.ptzzy.top/15053033256965.html"/>
    <updated>2017-09-13T19:48:45+08:00</updated>
    <id>http://note.ptzzy.top/15053033256965.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>自定义监控</p>

<p>一台主机可以添加多个模板, 一个模板中可以包含多个应用集, 一个应用集中可以包含多个监控项</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/66952784.jpg" alt=""/></p>

<ol>
<li><p>自定义监控项键值</p>

<p>客户端添加自定义的监控项--在自定义的监控项配置文件中添加键值</p>

<pre><code>echo &quot;UserParameter=login-user,who|wc -l&quot; \
&gt;&gt;/etc/zabbix/zabbix_agentd.d/userparameter_oldboy.conf
cat /etc/zabbix/zabbix_agentd.d/userparameter_oldboy.conf
/etc/init.d/zabbix-agent restart
</code></pre>

<p>服务端检查键值</p>

<pre><code>[root@m01 x86_64]# zabbix_get -s 172.16.1.41 -p 10050 -k &quot;login-user&quot;
1
[root@m01 x86_64]# zabbix_get -s 172.16.1.61 -p 10050 -k &quot;login-user&quot;
1
</code></pre></li>
<li><p>添加模板<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/80986302.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/27564849.jpg" alt=""/></p>

<ol>
<li><p>添加应用集</p>

<p>（监控项的存放的文件夹）：相同功能的监控项放在一起，这个地方起个名字叫做应用集</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/73557311.jpg" alt=""/></p></li>
<li><p>添加监控项</p>

<p>实现一个你需要监控的功能<br/>
名称：自己起个有意义名字<br/>
键值：填入自己定义的key<br/>
数据更新间隔(秒)：服务端去客户端抓取数据的时间间隔<br/>
历史数据保留时长(单位天)：收集到的数据保留时长；机器越多，时间越长，占用的数据库空间越大<br/>
趋势数据存储周期(单位天)</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/12658311.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/8244268.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/60424906.jpg" alt=""/></p></li>
<li><p>添加触发器</p>

<p>可选项，触发器就像地雷的引信，一旦收集到的数据达到预定值，就会触发报警</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/49792766.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/9281037.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/82820812.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/80286061.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/48522185.jpg" alt=""/></p></li>
<li><p>添加图形<br/>
将枯燥的数字转成图形，易于理解<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/60646548.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/93138961.jpg" alt=""/></p></li>
</ol></li>
<li><p>使用模板--关联模板</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/97664828.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/11737030.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/62097666.jpg" alt=""/></p>

<ol>
<li><p>测试告警</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/68284788.jpg" alt=""/></p></li>
</ol></li>
<li><p>使用自定义监控MySQL</p>

<p>因为mysql有密码，所以我们首先得改userparameter_mysql.conf 的用户密码</p>

<pre><code>[root@m01 ~]# vim /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf 
UserParameter=mysql.ping,/application/mysql/bin/mysqladmin -uroot -poldboy123 ping 2&gt;/dev/null| grep -c alive
</code></pre>

<pre><code>/etc/init.d/zabbix-agent restart
</code></pre>

<pre><code>[root@mysql-db01 ~]# mysqladmin -uroot -poldboy123 ping 2&gt;/dev/null | grep -c alive
1
</code></pre></li>
</ol></li>
<li><p>集群监控--多模板</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/99826767.jpg" alt=""/></p></li>
<li><p>WEB监控</p>

<p>监控你们网站指定URL地址，打开网页，能够看到指定内容，就可以确信我们网站是正常。</p>

<p>因为我们是使用服务端的系统监控所有内网主机的url地址，因此我们需要在m01机器做hosts解析</p>

<p>第一步：确保web01的Nginx服务正常访问<br/>
第二步：修改m01的hosts解析</p>

<pre><code>[root@m01 ~]# tail -2 /etc/hosts
10.0.0.8 bbs.etiantian.org blog.etiantian.org www.etiantian.org status.etiantian.org
[root@m01 ~]# curl http://www.etiantian.org/oldboy.html
www web01
</code></pre>

<p>第三步，网页上配置</p>

<p>web检测本质：是在服务端这台机器上执行了类似“curl 网站地址”的功能</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/64356140.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/79279633.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/62076512.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/22728563.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/43706920.jpg" alt=""/></p>

<blockquote>
<p>实现监控三个站点的效果</p>
</blockquote>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/8580229.jpg" alt=""/></p></li>
<li><p>主机、模版共享</p>

<p>导出主机设置的作用：共享、备份<br/>
<a href="https://share.zabbix.com/">https://share.zabbix.com/</a> </p></li>
<li><p>监控可视化</p>

<ol>
<li><p>聚合图形</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/3967639.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/27500446.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/78426135.jpg" alt=""/></p>

<p>添加至首页</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/65378452.jpg" alt=""/></p></li>
<li><p>幻灯片演示</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/78282733.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/81138038.jpg" alt=""/></p></li>
</ol></li>
<li><p>监控告警</p>

<ol>
<li><p>zabbix报警媒介</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/23771636.jpg" alt=""/></p></li>
<li><p>onealert第三方报警工具</p>

<p>zabbix监控其他主机，但是onealert监控zabbix的报警信息，一旦有报警，onealert会将报警内容发送给onealert服务器，然后onealert服务器通过你设置的报警方式进行报警<br/>
触发报警原理：状态改变才会触发----好变坏，坏变好</p></li>
<li><p>安装</p>

<pre><code>AppKey=???? Plugin=zabbix sh -c &quot;$(curl -L https://raw.githubusercontent.com/oneapm/onealert-agent-installer/master/onealert-zabbix-install-centos6.sh)&quot;
</code></pre>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/58919326.jpg" alt=""/></p></li>
<li><p>在zabbix中检查</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/56546116.jpg" alt=""/></p>

<p>补充: 重启onealert</p>

<pre><code>initctl restart onealert
</code></pre></li>
</ol></li>
<li><p>排错</p>

<ol>
<li><p>防火墙没关导致m01的客户端无法连接</p></li>
<li><p>中文字符乱码问题解决</p>

<pre><code>wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo
yum -y install wqy-microhei-fonts
\cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/fonts/dejavu/DejaVuSans.ttf
</code></pre></li>
<li><p>备份自定义配置文件后,服务启动失败<br/>
故障重现</p>

<pre><code>cd /etc/zabbix/zabbix_agentd.d/
cp userparameter_mysql.conf{,.bak}
</code></pre>

<pre><code>[root@db01 zabbix_agentd.d]# /etc/init.d/zabbix-agent restart
Shutting down Zabbix agent:                                [FAILED]
Starting Zabbix agent: zabbix_agentd [8667]: ERROR: cannot add user parameter &quot;mysql.status[*],echo &quot;show global status where Variable_name=&#39;$1&#39;;&quot; | HOME=/var/lib/zabbix mysql -N | awk &#39;{print $$2}&#39;&quot;: key &quot;mysql.status&quot; already exists
</code></pre>

<p>解决方法：修改 /etc/zabbix/zabbix_agentd.conf<br/>
将：</p>

<pre><code>Include=/etc/zabbix/zabbix_agentd.d/
</code></pre>

<p>修改为：</p>

<pre><code>Include=/etc/zabbix/zabbix_agentd.d/*.conf
</code></pre></li>
<li><p>普通用户使用netstat -lntup取值失败</p>

<pre><code>[laowang@db01 ~]$ netstat -lntup
(No info could be read for &quot;-p&quot;: geteuid()=503 but you should be root.)
Active Internet connections (only servers)
</code></pre>

<p>解决办法：</p>

<pre><code>chmod u+s /bin/netstat
</code></pre></li>
<li><p>数据类型不一致的</p>

<p>如果自定义监控项取出的值为字符串，然后在添加监控项的时候，信息类型如果不是字符串类型，则会报错</p>

<pre><code>Received value [lixxxxx] is not suitable for value type [Numeric (unsigned)] and data type [Decimal]
```
</code></pre></li>
<li><p>监控mysql</p>

<p>第一步：<br/>
在db01:监控mysql，自定义监控项的配置文件</p>

<pre><code>[root@db01 zabbix_agentd.d]# cat userparameter_mysql.conf
UserParameter=mysql.status[*],echo &quot;show global status where Variable_name=&#39;$1&#39;;&quot; | HOME=/var/lib/zabbix /application/mysql/bin/mysql -uroot -poldboy123 -N 2&gt;/dev/null| awk &#39;{print $$2}&#39;
UserParameter=mysql.ping,/application/mysql/bin/mysqladmin -uroot -poldboy123 ping 2&gt;/dev/null| grep -c alive
UserParameter=mysql.version,mysql -V
</code></pre>

<p>第二步：</p>

<pre><code>[root@oldboyedu38 ~]# zabbix_get -s 10.0.0.51 -k &quot;mysql.ping&quot;
1
</code></pre>

<p>第三步：<br/>
添加db01的主机，并连接Template App MySQL</p></li>
</ol></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卅五、centOS6.9部署zabbix]]></title>
    <link href="http://note.ptzzy.top/15053026350545.html"/>
    <updated>2017-09-13T19:37:15+08:00</updated>
    <id>http://note.ptzzy.top/15053026350545.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>网站可用性</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/46156257.jpg" alt=""/></p></li>
<li><p>硬件层的监控工具--远程管理卡</p>

<p>温度--风扇转速<br/>
电压电流<br/>
Dell远程管理卡 IDRAC (性价比高)      HP ILO            IBM IMM (最好最贵)<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/75643206.jpg" alt=""/></p></li>
<li><p>服务端部署zabbix-server</p>

<ol>
<li><p>安装环境检查</p>

<pre><code>[root@m01 ~]# cat /etc/redhat-release 
CentOS release 6.9 (Final)
[root@m01 ~]# uname -r
2.6.32-696.el6.x86_64
[root@m01 ~]# getenforce 
Disabled
[root@m01 ~]# /etc/init.d/iptables status
iptables: Firewall is not running.
[root@m01 ~]# hostname -I
10.0.0.61 172.16.1.61 
[root@m01 ~]# netstat -tunlp|grep 80 #检查占用80端口的程序,然后关闭
</code></pre></li>
<li><p>安装</p>

<pre><code>cd /server/tools/
tar xfP zabbix3.0.9_yum.tar.gz
yum -y --nogpgcheck -C install httpd mysql-server php55w php55w-mysql php55w-common php55w-gd php55w-mbstring php55w-mcrypt php55w-devel php55w-xml php55w-bcmath
yum -y --nogpgcheck -C install zabbix-web zabbix-server-mysql zabbix-web-mysql
</code></pre></li>
<li><p>配置</p>

<pre><code>\cp /usr/share/mysql/my-medium.cnf /etc/my.cnf
/etc/init.d/mysqld start
mysql -uroot -e&quot;create database zabbix character set utf8 collate utf8_bin;&quot;
mysql -uroot -e&quot;grant all on zabbix.* to zabbix@&#39;localhost&#39; identified by &#39;zabbix&#39;;&quot;
mysql -uroot -e&quot;flush privileges;&quot;
#导入zabbix数据库
zcat /usr/share/doc/zabbix-server-mysql-3.0.9/create.sql.gz|mysql -uzabbix -pzabbix zabbix
#修改PHP配置
sed -i.ori &#39;s#max_execution_time = 30#max_execution_time = 300#;s#max_input_time = 60#max_input_time = 300#;s#post_max_size = 8M#post_max_size = 16M#;910a date.timezone = Asia/Shanghai&#39; /etc/php.ini
diff /etc/php.ini{,.ori}
#修改zabbix-server配置
sed -i.ori &#39;115a DBPassword=zabbix&#39; /etc/zabbix/zabbix_server.conf
cp -R /usr/share/zabbix/ /var/www/html/
chmod -R 755 /etc/zabbix/web
chown -R apache.apache /etc/zabbix/web 
echo &quot;ServerName 127.0.0.1:80&quot;&gt;&gt;/etc/httpd/conf/httpd.conf
</code></pre></li>
<li><p>启动</p>

<pre><code>/etc/init.d/zabbix-server restart
</code></pre></li>
<li><p>页面</p>

<p><a href="http://10.0.0.61/zabbix/setup.php">http://10.0.0.61/zabbix/setup.php</a></p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/72415429.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/90921705.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/12897652.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/81333023.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/15262336.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/65659059.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/45739796.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/26205922.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/76601220.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/30085429.jpg" alt=""/></p></li>
</ol></li>
<li><p>客户端部署zabbix-agent</p>

<ol>
<li><p>安装</p>

<p>常规安装方法</p>

<pre><code>rpm -ivh http://repo.zabbix.com/zabbix/3.0/rhel/6/x86_64/zabbix-release-3.0-1.el6.noarch.rpm
yum -y install zabbix-agent
</code></pre>

<p>快速方法</p>

<pre><code>rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.0/rhel/6/x86_64/zabbix-agent-3.0.9-1.el6.x86_64.rpm
</code></pre></li>
<li><p>配置</p>

<pre><code>sed -i.ori &#39;s#Server=127.0.0.1#Server=172.16.1.61#&#39; /etc/zabbix/zabbix_agentd.conf
</code></pre>

<p>配置结果</p>

<pre><code>[root@m01 ~]# grep -Ev &quot;^$|#&quot; /etc/zabbix/zabbix_agentd.conf
PidFile=/var/run/zabbix/zabbix_agentd.pid
LogFile=/var/log/zabbix/zabbix_agentd.log
LogFileSize=0
Server=172.16.1.61
ServerActive=127.0.0.1
Hostname=Zabbix server
Include=/etc/zabbix/zabbix_agentd.d/
</code></pre></li>
<li><p>启动</p>

<pre><code>echo &#39;/etc/init.d/zabbix-agent start&#39; &gt;&gt;/etc/rc.local
tail -2 /etc/rc.local
/etc/init.d/zabbix-agent start
ss -lntup|grep zabbix
</code></pre></li>
</ol></li>
<li><p>m01部署zabbix-agent<br/>
过程同上, 配置文件中有一点不同(安装完成后不需要修改, 默认是127.0.0.1)</p>

<pre><code>Server=127.0.0.1
</code></pre></li>
<li><p>服务端访问检查工具</p>

<p>-s 指定访问的IP地址<br/>
-p 指定访问的端口，默认10050<br/>
-k 查询key值</p>

<pre><code>yum -y --nogpgcheck -C install zabbix-get
</code></pre>

<p>检查结果示例</p>

<pre><code>[root@m01 ~]# zabbix_get -s 172.16.1.41 -p 10050 -k &quot;system.cpu.load[all,avg1]&quot;
1.000000
</code></pre>

<p>在m01也需要安装客户端(参考上一章步骤), 访问检查失败时, 检查链路和防火墙等</p>

<pre><code>[root@m01 ~]#  zabbix_get -s 172.16.1.61 -p 10050 -k &quot;system.cpu.load[all,avg1]&quot;
zabbix_get [82642]: Check access restrictions in Zabbix agent configuration
[root@m01 ~]# /etc/init.d/iptables stop
iptables: Setting chains to policy ACCEPT: nat             [  OK  ]
iptables: Flushing firewall rules:                         [  OK  ]
iptables: Unloading modules:                               [  OK  ]
[root@m01 ~]#  zabbix_get -s 172.16.1.61 -p 10050 -k &quot;system.cpu.load[all,avg1]&quot;
0.090000
</code></pre></li>
<li><p>添加zabbix主机</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/40557940.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/66236646.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/9216194.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/66457779.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/3711939.jpg" alt=""/></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卅三、PPTP实现VPN]]></title>
    <link href="http://note.ptzzy.top/15052974923145.html"/>
    <updated>2017-09-13T18:11:32+08:00</updated>
    <id>http://note.ptzzy.top/15052974923145.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>PPTP实现VPN</p>

<ol>
<li><p>为什么需要VPN</p>

<p>VPN(全称Virtual Private Network)虚拟专用网络。为了安全传输数据--将数据加密传输</p>

<p>①ssh secure shell</p>

<p>②vpn：在我们公共网络（网线）偷偷的建一条隧道, 然后我们所有数据从这个隧道传输, 这个隧道名字叫做vpn==虚拟专用网络</p>

<p>③专用网络：专线, 自己拉一条网线或者光纤, 这个专线自己独享（公司-机房, 北京-广州）</p>

<p>公司有钱--专线, 没钱-vpn</p>

<p>vpn的优点：方便, 省钱; 缺点是：借助公网, 受公网的网络环境影响大</p>

<p>专线优点：网络环境好, 速度快, 传输距离远; 缺点：成本高</p>

<p>中间的解决方案：租用运营商专线</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/2956070.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/88146659.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/2525307.jpg" alt=""/></p></li>
<li><p>安装部署PPTP（需要epel源）</p>

<pre><code>[root@m01 ~]# yum install -y pptpd
[root@m01 ~]# rpm -qa|grep pptp
pptpd-1.4.0-3.el6.x86_64
[root@m01 ~]# rpm -qa|grep ppp
ppp-2.4.5-10.el6.x86_64
</code></pre>

<ol>
<li><p>内核转发<br/>
我们Windows连接pptp服务器是通过外网卡（eth0）,但是内网是eth1。默认情况, 发给eth0的数据不会给eth1。开启ip内核转发, 可以让eth0将数据包转发给eth1</p>

<pre><code>[root@lb02 ~]# grep &#39;forward&#39; /etc/sysctl.conf
# Controls IP packet forwarding
net.ipv4.ip_forward = 0
[root@lb02 ~]# sed -i &#39;s#net.ipv4.ip_forward = 0#net.ipv4.ip_forward = 1#&#39; /etc/sysctl.conf
[root@lb02 ~]# grep &#39;forward&#39; /etc/sysctl.conf
# Controls IP packet forwarding
net.ipv4.ip_forward = 1
[root@m01 ~]# sysctl -p
</code></pre></li>
<li><p>主要配置<br/>
设定VPN可以使用的ip范围</p>

<pre><code>[root@m01 ~]# sed -i.ori &#39;$a localip 10.0.0.61\nremoteip 172.16.1.100-110&#39; /etc/pptpd.conf 
[root@m01 ~]# tail -2 /etc/pptpd.conf
localip 10.0.0.61
remoteip 172.16.1.100-110
[root@m01 ~]# diff /etc/pptpd.conf{,.ori}
107,108d106
&lt; localip 10.0.0.61
&lt; remoteip 172.16.1.100-110
</code></pre></li>
<li><p>账号密码文件---添加账号密码<br/>
修改此文件无需重启pptp服务，当用户登录时，pptp进程都会读取一次这个文件；密码是明文的，注意600权限</p>

<pre><code>[root@m01 ~]# cat /etc/ppp/chap-secrets
oldboy * 123456 *
[root@m01 ~]# ll /etc/ppp/chap-secrets
-rw------- 1 root root 96 Aug 25 11:43 /etc/ppp/chap-secrets
</code></pre>

<blockquote>
<p>第1列：用户名, 账号<br/>
第2列：* 代表所有, 作用是可以连接的服务器<br/>
第3列：密码<br/>
第4列：* 所有, 随机分配ip地址, 这一列可以指定这个的用户的分配的ip地址</p>
</blockquote></li>
<li><p>启动服务</p>

<pre><code>[root@m01 ~]# /etc/init.d/pptpd
Usage: /etc/init.d/pptpd {start|stop|restart|restart-kill|status}
[root@m01 ~]# /etc/init.d/pptpd start
Starting pptpd:                                            [  OK  ]
</code></pre>

<p>检查</p>

<pre><code>[root@m01 ~]# tailf /var/log/messages
Aug 25 11:32:45 oldboyedu38 pptpd[37609]: MGR: Maximum of 100 connections reduced to 11, not enough IP addresses given
Aug 25 11:32:45 oldboyedu38 pptpd[37610]: MGR: Manager process started
Aug 25 11:32:45 oldboyedu38 pptpd[37610]: MGR: Maximum of 11 connections available
[root@m01 ~]# netstat -tunlp|grep pptp
tcp    0    0 0.0.0.0:1723          0.0.0.0:*         LISTEN      37610/pptpd
</code></pre></li>
<li><p>window启用VPN<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/77134922.jpg" alt=""/></p></li>
</ol></li>
<li><p>企业案例: VPN日志审计----记录登录用户名日志</p>

<p>实现原理<br/>
两个可执行文件: /etc/ppp/ip-up和/etc/ppp/ip-down, 其实是用户登录和下线时,PPTP服务会执行的脚本<br/>
修改这两个脚本, 可以记录用户登录和下线时的详细信息</p>

<pre><code>sed -i.ori &#39;$i echo &quot;$PEERNAME 分配IP: $5 登录IP: $6 登录时间: `date -d today +%F_%T`&quot; &gt;&gt; /var/log/pptpd.log&#39; /etc/ppp/ip-up
sed -i.ori &#39;$i echo &quot;$PEERNAME 下线IP: $6 下线时间: `date -d today +%F_%T`&quot; &gt;&gt; /var/log/pptpd.log&#39; /etc/ppp/ip-down
</code></pre>

<p>实验结果</p>

<pre><code>[root@m01 ~]# cat /var/log/pptpd.log
oldboy 下线IP: 10.0.0.1 下线时间: 2017-08-25_12:20:44
oldboy 分配IP: 172.16.1.100 登录IP: 10.0.0.1 登录时间: 2017-08-25_12:21:13
oldboy 下线IP: 10.0.0.1 下线时间: 2017-08-25_12:21:37
oldboy 分配IP: 172.16.1.100 登录IP: 10.0.0.1 登录时间: 2017-08-25_12:21:45
oldboy 下线IP: 10.0.0.1 下线时间: 2017-08-25_21:03:36
</code></pre></li>
<li><p>企业案例: 如何通过外网访问内网服务器？</p>

<p>子公司内部只有一台服务器, 只有内网地址, 没有公网IP, 但可以通过路由器访问公网, 但是这种模式, 无法从外网访问这台服务器.能找到的解决方法：</p>

<blockquote>
<p>①给笔记本一个公网ip, 但是现在给不了;<br/>
②端口映射, 在路由器上配置, 但是不允许你用;<br/>
③vpn, 作用是让出差的员工访问内网, 但是vpn需要账号, 没有权限开通;<br/>
④teamviewer, 或者向日葵, 能够穿透内网, 不安全...</p>
</blockquote>

<blockquote>
<p>所有网络设备都归总公司管辖, 子公司没有合理理由无法申请。公司内部也有VPN服务器, 但VPN帐号也需要申请。在此种场景, 如何通过外网访问内网服务器？</p>

<blockquote>
<p>解答：在外部有公网IP的机器上部署vpn服务, 内网服务器拨号登录vpn, 外部人员也登录vpn。只要vpn服务器不禁止客户端互联, 外部用户就能访问内部服务器。</p>
</blockquote>
</blockquote>

<blockquote>
<p>建议使用OpenVPN, 比较稳定<br/>
OpenVPN的参数<br/>
client-to-client允许多个VPN client互相通信<br/>
pptp服务器设置防火墙转发规则, 也能让客户端互相访问<br/>
还有一个openswan也能实现</p>
</blockquote></li>
<li><p>PPTP的局限和不足</p>

<p>由微软开发,系统自带(客户端), 端口1723, 使用GRE协议<br/>
pptp只能支持100个用户---利用反向代理<br/>
如果家里的网络连接不上pptp服务器, 怎么办？----手机开热点, 移动4G</p></li>
<li><p>排错</p>

<p>WIN10,VPN,PPTP,连接VPN后无法上网, VPN连接右键属性--网络--IPV4, 点属性没反应不会弹出对话框 </p>

<p>可以尝试一下下面的方法。<br/>
<code>C:\Users\用户名\AppData\Roaming\Microsoft\Network\Connections\Pbk</code><br/>
用记事本打开<code>rasphone.pbk</code>找到<code>IpPrioritizeRemote=1</code></p>

<p>改成0就取消 “从远程网络上使用默认网关”<br/>
改DNS方法</p>

<p>可以修改<code>C:\Users\用户名\AppData\Roaming\Microsoft\Network\Connections\Pbk</code>下面的<code>rasphone.pbk</code>用文本打开<br/>
改 <code>IpDnsAddress=</code>要设置的DNS</p></li>
</ol></li>
<li><p>内网ip上网</p>

<ol>
<li><p>m01启用IP转发功能</p>

<pre><code>#修改系统配置文件开机生效
sed -i &#39;s#net.ipv4.ip_forward = 0#net.ipv4.ip_forward = 1#&#39; /etc/sysctl.conf
#查看确认修改成功
grep &quot;net.ipv4.ip_forward&quot; /etc/sysctl.conf
#重新加载配置文件,使修改生效
sysctl -p
# 添加iptables规则--转发网段请求
iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j MASQUERADE
## iptables另两种设置方法:(暂时没搞懂) 
## iptables  -t nat -A POSTROUTING -s 172.16.1.0/24 -o eth1 -j SNAT --to-source 10.0.0.200
# 表示将来自172.16.1.0 网段的请求, 全部从10.0.0.61 出去访问互联网
## iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j SNAT --to-source 10.0.0.61
## iptables -A FORWARD -s 172.16.1.0/24 -j ACCEPT
## iptables -A FORWARD -d 172.16.1.0/24 -j ACCEPT
</code></pre>

<p>另一种使IP转发设置生效的方法(内存中临时生效,重启失效)</p>

<pre><code>## sysctl -w net.ipv4.ip_forward=1
</code></pre></li>
<li><p>测试主机</p>

<pre><code>sed -i &#39;s#ONBOOT=yes#ONBOOT=no#g&#39; /etc/sysconfig/network-scripts/ifcfg-eth0 #eth0不启动
#eth1网关设置为 m01的172.16.1.61 地址
cat &gt;&gt;/etc/sysconfig/network-scripts/ifcfg-eth1&lt;&lt;EOF
GATEWAY=172.16.1.61
DNS1=223.5.5.5
EOF
/etc/init.d/network restart
ping www.bing.com #测试
</code></pre></li>
</ol></li>
<li><p>bash切换zsh</p>

<ol>
<li><p>安装zsh</p>

<pre><code>yum install -y git zsh 
#切换成zsh 
chsh -s `which zsh` 
#把oh-my-zsh插件克隆到本地 
git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh 
#把oh-my-zsh的zsh模板复制出来一份 
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre></li>
<li><p>修改主题</p>

<pre><code>#修改~/.zshrc
vim ~/.zshrc
# ZSH_THEME=&quot;ys&quot;
#退出重新登录
#1.github是一个在线的代码仓库（网站）, 里面有各种开发者提交的代码
#2.git是将github上面的代码下载下来的工具
#3.zsh就是我们需要把bash替换的一个shell
#4.oh-my-zsh是一个强大的zsh插件, 里面有很多主题, 可以使我们显示, 操作, git的使用更加方便
#5.ys就是一个很常用的主题, 其他主题: awesomepanda agnoster wedisagree simple
</code></pre></li>
</ol></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卅四、openvpn安装与使用]]></title>
    <link href="http://note.ptzzy.top/15052960182182.html"/>
    <updated>2017-09-13T17:46:58+08:00</updated>
    <id>http://note.ptzzy.top/15052960182182.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>openvpn原理</p>

<blockquote>
<p>openvpn通过使用公开密钥（非对称密钥，加密解密使用不同的key，一个称为Publice key，另外一个是Private key）对数据进行加密，这种方式称为TLS加密。</p>
</blockquote>

<blockquote>
<p>openvpn使用TLS加密的工作过程是，首先VPN Sevrver端和VPN Client端要有相同的CA证书，双方通过交换证书验证双方的合法性，用于决定是否建立VPN连接。</p>
</blockquote>

<blockquote>
<p>然后使用对方的CA证书，把自己目前使用的数据加密方法加密后发送给对方，由于使用的是对方CA证书加密，所以只有对方CA证书对应的Private key才能解密该数据，这样就保证了此密钥的安全性，并且此密钥是定期改变的，对于窃听者来说，可能还没有破解出此密钥，VPN通信双方可能就已经更换密钥了。</p>
</blockquote></li>
<li><p>安装openvpn</p>

<ol>
<li><p>环境准备</p>

<p>yum方式安装，此处统一使用aliyun的base和epel源</p>

<pre><code>wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
</code></pre>

<p>为避免出现错误关闭selinux</p>

<pre><code>[root@centos7 ~]# cat /etc/redhat-release 
CentOS Linux release 7.2.1511 (Core) 
[root@centos7 ~]# getenforce 
Disabled
[root@centos7 ~]#
</code></pre></li>
<li><p>安装openvpn server</p>

<pre><code>yum install -y openvpn
#查看版本
[root@centos7 yum.repos.d]# openvpn --version
OpenVPN 2.4.3 x86_64-redhat-linux-gnu [Fedora EPEL patched] [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Jun 21 2017
library versions: OpenSSL 1.0.1e-fips 11 Feb 2013, LZO 2.06
Originally developed by James Yonan
</code></pre></li>
<li><p>安装easy-rsa用来制作openvpn相关证书</p>

<pre><code>yum install -y easy-rsa
#查看easy-rsa安装的详细信息
[root@centos7 ~]# rpm -qa easy-rsa
easy-rsa-2.2.2-1.el7.noarch
[root@centos7 ~]# rpm -ql easy-rsa
/usr/share/doc/easy-rsa-2.2.2
/usr/share/doc/easy-rsa-2.2.2/COPYING
/usr/share/doc/easy-rsa-2.2.2/COPYRIGHT.GPL
/usr/share/doc/easy-rsa-2.2.2/doc
/usr/share/doc/easy-rsa-2.2.2/doc/Makefile.am
/usr/share/doc/easy-rsa-2.2.2/doc/README-2.0
/usr/share/easy-rsa
/usr/share/easy-rsa/2.0
/usr/share/easy-rsa/2.0/build-ca
/usr/share/easy-rsa/2.0/build-dh
/usr/share/easy-rsa/2.0/build-inter
/usr/share/easy-rsa/2.0/build-key
/usr/share/easy-rsa/2.0/build-key-pass
/usr/share/easy-rsa/2.0/build-key-pkcs12
/usr/share/easy-rsa/2.0/build-key-server
/usr/share/easy-rsa/2.0/build-req
/usr/share/easy-rsa/2.0/build-req-pass
/usr/share/easy-rsa/2.0/clean-all
/usr/share/easy-rsa/2.0/inherit-inter
/usr/share/easy-rsa/2.0/list-crl
/usr/share/easy-rsa/2.0/openssl-0.9.6.cnf
/usr/share/easy-rsa/2.0/openssl-0.9.8.cnf
/usr/share/easy-rsa/2.0/openssl-1.0.0.cnf
/usr/share/easy-rsa/2.0/pkitool
/usr/share/easy-rsa/2.0/revoke-full
/usr/share/easy-rsa/2.0/sign-req
/usr/share/easy-rsa/2.0/vars
/usr/share/easy-rsa/2.0/whichopensslcnf
</code></pre></li>
</ol></li>
<li><p>制作相关证书</p>

<ol>
<li><p>生成CA证书</p>

<blockquote>
<p>openvpn与easy-rsa安装完毕后，我们可以直接在/usr/share/easy-rsa/2.0 制作相关的证书，但是为了后续的管理证书的方便，我们需要在/etc/openvpn/目录下创建easy-rsa文件夹， 然后把/usr/share/easy-rsa/目录下的所有文件全部复制到/etc/openvpn/easy-rsa/下：</p>
</blockquote>

<pre><code>[root@centos7 ~]# mkdir /etc/openvpn/easy-rsa
[root@centos7 ~]# cp -a /usr/share/easy-rsa/2.0/* /etc/openvpn/easy-rsa/
[root@centos7 ~]# ls -l /etc/openvpn/easy-rsa/
总用量 112
-rwxr-xr-x 1 root root   119 11月  9 2013 build-ca
-rwxr-xr-x 1 root root   352 11月  9 2013 build-dh
-rwxr-xr-x 1 root root   188 11月  9 2013 build-inter
-rwxr-xr-x 1 root root   163 11月  9 2013 build-key
-rwxr-xr-x 1 root root   157 11月  9 2013 build-key-pass
-rwxr-xr-x 1 root root   249 11月  9 2013 build-key-pkcs12
-rwxr-xr-x 1 root root   268 11月  9 2013 build-key-server
-rwxr-xr-x 1 root root   213 11月  9 2013 build-req
-rwxr-xr-x 1 root root   158 11月  9 2013 build-req-pass
-rwxr-xr-x 1 root root   449 11月  9 2013 clean-all
-rwxr-xr-x 1 root root  1471 11月  9 2013 inherit-inter
-rwxr-xr-x 1 root root   302 11月  9 2013 list-crl
-rw-r--r-- 1 root root  7791 11月  9 2013 openssl-0.9.6.cnf
-rw-r--r-- 1 root root  8348 11月  9 2013 openssl-0.9.8.cnf
-rw-r--r-- 1 root root  8245 11月  9 2013 openssl-1.0.0.cnf
-rwxr-xr-x 1 root root 12966 11月  9 2013 pkitool
-rwxr-xr-x 1 root root   928 11月  9 2013 revoke-full
-rwxr-xr-x 1 root root   178 11月  9 2013 sign-req
-rw-r--r-- 1 root root  2077 11月  9 2013 vars
-rwxr-xr-x 1 root root   740 11月  9 2013 whichopensslcnf
#编辑vars文件，修改生成证书需要的信息
[root@centos7 ~]# cd /etc/openvpn/easy-rsa/
[root@centos7 easy-rsa]# cp vars{,.bak}
[root@centos7 easy-rsa]# vim vars
...
export KEY_COUNTRY=&quot;CN&quot;            #国家
export KEY_PROVINCE=&quot;BJ&quot;           #省
export KEY_CITY=&quot;Beijing&quot;          #市
export KEY_ORG=&quot;user&quot;              #组织
export KEY_EMAIL=&quot;123@qq.com&quot;      #邮件
export KEY_CN=oldboy
export KEY_NAME=beyond
export KEY_OU=beyond
...
#用source命令使配置生效
[root@centos7 easy-rsa]# source vars
NOTE: If you run ./clean-all, I will be doing a rm -rf on /etc/openvpn/easy-rsa/keys
[root@centos7 easy-rsa]# ./clean-all    #清除所有证书相关内容
[root@centos7 easy-rsa]# #开始生成CA证书 一路回车即可
[root@centos7 easy-rsa]# ./build-ca
Generating a 2048 bit RSA private key
..........................................+++
.................................+++
writing new private key to &#39;ca.key&#39;
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [CN]:
State or Province Name (full name) [BJ]:
Locality Name (eg, city) [Beijing]:
Organization Name (eg, company) [user]:
Organizational Unit Name (eg, section) [beyond]:
Common Name (eg, your name or your server&#39;s hostname) [oldboy]:
Name [beyond]:
Email Address [123@qq.com]:
#查看生成的证书
[root@centos7 easy-rsa]# ll keys/
总用量 12
-rw-r--r-- 1 root root 1635 9月  10 18:31 ca.crt
-rw------- 1 root root 1704 9月  10 18:31 ca.key
-rw-r--r-- 1 root root    0 9月  10 18:30 index.txt
-rw-r--r-- 1 root root    3 9月  10 18:30 serial
#我们可以看到已经生成了ca.crt和ca.key两个文件，其中ca.crt就是我们所说的CA证书，把该CA证书的ca.crt文件复制到openvpn的启动目录/etc/openvpn下：
[root@centos7 easy-rsa]# cp keys/ca.crt /etc/openvpn/
[root@centos7 easy-rsa]# ll /etc/openvpn/
总用量 8
-rw-r--r-- 1 root root 1635 9月  10 18:37 ca.crt
drwxr-x--- 2 root root    6 6月  21 18:23 client
drwxr-xr-x 3 root root 4096 9月  10 18:30 easy-rsa
drwxr-x--- 2 root root    6 6月  21 18:23 server
</code></pre></li>
<li><p>生成server端证书和秘钥</p>

<pre><code>[root@centos7 easy-rsa]# ./build-key-server vpnserver
Generating a 2048 bit RSA private key
.........+++
.......................................................................................................................................................................................................................................................................................................................................................................+++
writing new private key to &#39;vpnserver.key&#39;
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [CN]:
State or Province Name (full name) [BJ]:
Locality Name (eg, city) [Beijing]:
Organization Name (eg, company) [user]:
Organizational Unit Name (eg, section) [beyond]:
Common Name (eg, your name or your server&#39;s hostname) [vpnserver]:
Name [beyond]:
Email Address [123@qq.com]:

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:123456                #发送证书请求需要的密码 可以为空
An optional company name []:oldboy            #可选的组织名   可以为空
Using configuration from /etc/openvpn/easy-rsa/openssl-1.0.0.cnf
Check that the request matches the signature
Signature ok
The Subject&#39;s Distinguished Name is as follows
countryName           :PRINTABLE:&#39;CN&#39;
stateOrProvinceName   :PRINTABLE:&#39;BJ&#39;
localityName          :PRINTABLE:&#39;Beijing&#39;
organizationName      :PRINTABLE:&#39;user&#39;
organizationalUnitName:PRINTABLE:&#39;beyond&#39;
commonName            :PRINTABLE:&#39;vpnserver&#39;
name                  :PRINTABLE:&#39;beyond&#39;
emailAddress          :IA5STRING:&#39;123@qq.com&#39;
Certificate is to be certified until Sep  8 10:46:28 2027 GMT (3650 days)
Sign the certificate? [y/n]:y

1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
[root@centos7 easy-rsa]# #查看生成的证书
[root@centos7 easy-rsa]# ll keys/
总用量 48
-rw-r--r-- 1 root root 5337 9月  10 18:46 01.pem
-rw-r--r-- 1 root root 1635 9月  10 18:31 ca.crt
-rw------- 1 root root 1704 9月  10 18:31 ca.key
-rw-r--r-- 1 root root  116 9月  10 18:46 index.txt
-rw-r--r-- 1 root root   21 9月  10 18:46 index.txt.attr
-rw-r--r-- 1 root root    0 9月  10 18:30 index.txt.old
-rw-r--r-- 1 root root    3 9月  10 18:46 serial
-rw-r--r-- 1 root root    3 9月  10 18:30 serial.old
-rw-r--r-- 1 root root 5337 9月  10 18:46 vpnserver.crt
-rw-r--r-- 1 root root 1119 9月  10 18:46 vpnserver.csr
-rw------- 1 root root 1704 9月  10 18:46 vpnserver.key
</code></pre></li>
<li><p>创建迪菲・赫尔曼密钥 生成传输进行秘钥交换时用到的交换秘钥协议文件</p>

<pre><code>[root@centos7 easy-rsa]# ./build-dh 
Generating DH parameters, 2048 bit long safe prime, generator 2
This is going to take a long time
...................................................................................................................................................................+..............................................................................
#查看生成的文件
[root@centos7 easy-rsa]# ll keys/
总用量 52
-rw-r--r-- 1 root root 5337 9月  10 18:46 01.pem
-rw-r--r-- 1 root root 1635 9月  10 18:31 ca.crt
-rw------- 1 root root 1704 9月  10 18:31 ca.key
-rw-r--r-- 1 root root  424 9月  10 18:54 dh2048.pem
-rw-r--r-- 1 root root  116 9月  10 18:46 index.txt
-rw-r--r-- 1 root root   21 9月  10 18:46 index.txt.attr
-rw-r--r-- 1 root root    0 9月  10 18:30 index.txt.old
-rw-r--r-- 1 root root    3 9月  10 18:46 serial
-rw-r--r-- 1 root root    3 9月  10 18:30 serial.old
-rw-r--r-- 1 root root 5337 9月  10 18:46 vpnserver.crt
-rw-r--r-- 1 root root 1119 9月  10 18:46 vpnserver.csr
-rw------- 1 root root 1704 9月  10 18:46 vpnserver.key

已经生成了dh文件dh2048.pem。 把vpnserver.crt、vpnserver.key、dh2048.pem复制到/etc/openvpn/目录下
[root@centos7 easy-rsa]# cp keys/dh2048.pem keys/vpnserver.crt keys/vpnserver.key /etc/openvpn/
</code></pre></li>
<li><p>生成client客户端证书和key</p>

<pre><code>[root@centos7 easy-rsa]# ./build-key vpnclient      #拨号时不需要密码
Generating a 2048 bit RSA private key
....................................................................+++
.....................................+++
writing new private key to &#39;vpnclient.key&#39;
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [CN]:
State or Province Name (full name) [BJ]:
Locality Name (eg, city) [Beijing]:
Organization Name (eg, company) [user]:
Organizational Unit Name (eg, section) [beyond]:
Common Name (eg, your name or your server&#39;s hostname) [vpnclient]:
Name [beyond]:
Email Address [123@qq.com]:

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:123456               #此处密码与服务端一致即可
An optional company name []:oldboy
Using configuration from /etc/openvpn/easy-rsa/openssl-1.0.0.cnf
Check that the request matches the signature
Signature ok
The Subject&#39;s Distinguished Name is as follows
countryName           :PRINTABLE:&#39;CN&#39;
stateOrProvinceName   :PRINTABLE:&#39;BJ&#39;
localityName          :PRINTABLE:&#39;Beijing&#39;
organizationName      :PRINTABLE:&#39;user&#39;
organizationalUnitName:PRINTABLE:&#39;beyond&#39;
commonName            :PRINTABLE:&#39;vpnclient&#39;
name                  :PRINTABLE:&#39;beyond&#39;
emailAddress          :IA5STRING:&#39;123@qq.com&#39;
Certificate is to be certified until Sep  8 11:44:26 2027 GMT (3650 days)
Sign the certificate? [y/n]:y

1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
#查看生成的文件
[root@centos7 easy-rsa]# ll keys/
总用量 84
-rw-r--r-- 1 root root 5337 9月  10 18:46 01.pem
-rw-r--r-- 1 root root 5219 9月  10 19:44 02.pem
-rw-r--r-- 1 root root 1635 9月  10 18:31 ca.crt
-rw------- 1 root root 1704 9月  10 18:31 ca.key
-rw-r--r-- 1 root root  424 9月  10 18:54 dh2048.pem
-rw-r--r-- 1 root root  232 9月  10 19:44 index.txt
-rw-r--r-- 1 root root   21 9月  10 19:44 index.txt.attr
-rw-r--r-- 1 root root   21 9月  10 18:46 index.txt.attr.old
-rw-r--r-- 1 root root  116 9月  10 18:46 index.txt.old
-rw-r--r-- 1 root root    3 9月  10 19:44 serial
-rw-r--r-- 1 root root    3 9月  10 18:46 serial.old
-rw-r--r-- 1 root root 5219 9月  10 19:44 vpnclient.crt
-rw-r--r-- 1 root root 1119 9月  10 19:44 vpnclient.csr
-rw------- 1 root root 1704 9月  10 19:44 vpnclient.key
-rw-r--r-- 1 root root 5337 9月  10 18:46 vpnserver.crt
-rw-r--r-- 1 root root 1119 9月  10 18:46 vpnserver.csr
-rw------- 1 root root 1704 9月  10 18:46 vpnserver.key

#生成拨号时需要密码的客户端文件和证书，和上面两者选择一种就可以

[root@centos7 easy-rsa]# ./build-key-pass vpnbeyond
Generating a 2048 bit RSA private key
....................................................................+++
............+++
writing new private key to &#39;vpnbeyond.key&#39;
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [CN]:
State or Province Name (full name) [BJ]:
Locality Name (eg, city) [Beijing]:
Organization Name (eg, company) [user]:
Organizational Unit Name (eg, section) [beyond]:
Common Name (eg, your name or your server&#39;s hostname) [vpnbeyond]:
Name [beyond]:
Email Address [123@qq.com]:

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:123456
An optional company name []:oldboy
Using configuration from /etc/openvpn/easy-rsa/openssl-1.0.0.cnf
Check that the request matches the signature
Signature ok
The Subject&#39;s Distinguished Name is as follows
countryName           :PRINTABLE:&#39;CN&#39;
stateOrProvinceName   :PRINTABLE:&#39;BJ&#39;
localityName          :PRINTABLE:&#39;Beijing&#39;
organizationName      :PRINTABLE:&#39;user&#39;
organizationalUnitName:PRINTABLE:&#39;beyond&#39;
commonName            :PRINTABLE:&#39;vpnbeyond&#39;
name                  :PRINTABLE:&#39;beyond&#39;
emailAddress          :IA5STRING:&#39;123@qq.com&#39;
Certificate is to be certified until Sep  8 11:48:10 2027 GMT (3650 days)
Sign the certificate? [y/n]:y

1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
#查看生成的文件
[root@centos7 easy-rsa]# ll keys/
总用量 108
-rw-r--r-- 1 root root 5337 9月  10 18:46 01.pem
-rw-r--r-- 1 root root 5219 9月  10 19:44 02.pem
-rw-r--r-- 1 root root 5219 9月  10 19:48 03.pem
-rw-r--r-- 1 root root 1635 9月  10 18:31 ca.crt
-rw------- 1 root root 1704 9月  10 18:31 ca.key
-rw-r--r-- 1 root root  424 9月  10 18:54 dh2048.pem
-rw-r--r-- 1 root root  348 9月  10 19:48 index.txt
-rw-r--r-- 1 root root   21 9月  10 19:48 index.txt.attr
-rw-r--r-- 1 root root   21 9月  10 19:44 index.txt.attr.old
-rw-r--r-- 1 root root  232 9月  10 19:44 index.txt.old
-rw-r--r-- 1 root root    3 9月  10 19:48 serial
-rw-r--r-- 1 root root    3 9月  10 19:44 serial.old
-rw-r--r-- 1 root root 5219 9月  10 19:48 vpnbeyond.crt
-rw-r--r-- 1 root root 1119 9月  10 19:48 vpnbeyond.csr
-rw------- 1 root root 1834 9月  10 19:48 vpnbeyond.key
-rw-r--r-- 1 root root 5219 9月  10 19:44 vpnclient.crt
-rw-r--r-- 1 root root 1119 9月  10 19:44 vpnclient.csr
-rw------- 1 root root 1704 9月  10 19:44 vpnclient.key
-rw-r--r-- 1 root root 5337 9月  10 18:46 vpnserver.crt
-rw-r--r-- 1 root root 1119 9月  10 18:46 vpnserver.csr
-rw------- 1 root root 1704 9月  10 18:46 vpnserver.key
</code></pre>

<p>已经生成了vpnclient.csr、vpnclient.crt和vpnclient.key这个三个文件, vpnclient.crt和vpnclient.key两个文件是我们要使用的。至此，Client端E证书就制作完毕。</p></li>
</ol></li>
<li><p>配置server端</p>

<pre><code>[root@centos7 easy-rsa]# cp /usr/share/doc/openvpn-2.4.3/sample/sample-config-files/server.conf /etc/openvpn/server.conf.bak
[root@centos7 easy-rsa]# cd /etc/openvpn/
[root@centos7 openvpn]# grep -Ev &quot;^;|^#|^$&quot; server.conf.bak &gt;server.conf
[root@centos7 openvpn]# vim server.conf
port 1194
proto tcp
dev tun
ca ca.crt
cert vpnserver.crt
key vpnserver.key  # This file should be kept secret
dh dh2048.pem
server 10.8.0.0 255.255.255.0
push &quot;route 172.16.1.0 255.255.255.0&quot;
ifconfig-pool-persist ipp.txt
keepalive 10 120
comp-lzo
persist-key
persist-tun
status openvpn-status.log
verb 3
client-to-client
duplicate-cn
log /var/log/openvpn.log
~                                                                                  
~                                                                                  
&quot;server.conf&quot; 19L, 360C 已写入  
#启动服务
[root@centos7 openvpn]# systemctl start openvpn@server   
[root@centos7 openvpn]# ss -lntup |grep openvpn
tcp    LISTEN     0      1         *:1194                  *:*                   users:((&quot;openvpn&quot;,pid=19333,fd=6))
</code></pre></li>
<li><p>client端配置</p>

<ol>
<li><p>在server端操作 </p>

<p>创建客户端文件夹并拷贝客户端文件到该文件夹配置完成后打包压缩下载到本地Windows端</p>

<pre><code>[root@centos7 openvpn]# mkdir vpnclient
[root@centos7 openvpn]# cp /usr/share/doc/openvpn-2.4.3/sample/sample-config-files/client.conf ./vpnclient/vpnclient.ovpn
[root@centos7 openvpn]# pwd
/etc/openvpn
[root@centos7 openvpn]# cp easy-rsa/keys/vpnclient.crt easy-rsa/keys/vpnclient.key easy-rsa/keys/ca.crt easy-rsa/keys/ca.key ./vpnclient/
[root@centos7 openvpn]# ls -l vpnclient/
总用量 24
-rw-r--r-- 1 root root 1635 9月  10 21:22 ca.crt
-rw------- 1 root root 1704 9月  10 21:22 ca.key
-rw-r--r-- 1 root root 5219 9月  10 21:22 vpnclient.crt
-rw------- 1 root root 1704 9月  10 21:22 vpnclient.key
-rw-r--r-- 1 root root 3584 9月  10 21:17 vpnclient.ovpn
[root@centos7 openvpn]# cp vpnclient/vpnclient.ovpn{,.bak}
[root@centos7 openvpn]# vim vpnclient/vpnclient.ovpn
ns-cert-type server
client
dev tun
proto tcp
remote 10.0.0.201 1194
resolv-retry infinite
nobind
persist-key
persist-tun
ca ca.crt
cert vpnclient.crt
key vpnclient.key
ns-cert-type server
comp-lzo
verb 3
~
&quot;vpnclient/vpnclient.ovpn&quot; 14L, 184C 已写入

[root@centos7 openvpn]# zip -r vpnclient.zip ./vpnclient/
  adding: vpnclient/ (stored 0%)
  adding: vpnclient/vpnclient.crt (deflated 47%)
  adding: vpnclient/vpnclient.key (deflated 23%)
  adding: vpnclient/ca.crt (deflated 35%)
  adding: vpnclient/ca.key (deflated 23%)
  adding: vpnclient/vpnclient.ovpn.bak (deflated 54%)
  adding: vpnclient/vpnclient.ovpn (deflated 30%)
[root@centos7 openvpn]# ls
ca.crt      easy-rsa            server           vpnclient      vpnserver.key
client      ipp.txt             server.conf      vpnclient.zip
dh2048.pem  openvpn-status.log  server.conf.bak  vpnserver.crt
[root@centos7 openvpn]# sz vpnclient.zip -y
rz
 zmodem trl+C ȡ
  100%       9 KB    9 KB/s 00:00:01       0 Errors
  ```
</code></pre></li>
<li><p>Windows客户端上操作</p>

<p>在windows的Client端，安装完毕Openvpn后，程序安装路径是：D:\ProgramFiles\OpenVPN\，如下图解压sz下载的压缩包到config目录下：<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/13093217.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/8858594.jpg" alt=""/></p>

<p>双击桌面openvpn图标如上图点击连接后会成功拨号如下所示：分配的ip地址是10.8.0.6</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/50805201.jpg" alt=""/></p>

<p>在vpnserver端查看IP地址如下图分配的IP地址是10.8.0.1，然后在Windows端ping10.8.0.6即可ping通，当然用crt或者xshell也可连接上</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/82462584.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/52340472.jpg" alt=""/></p></li>
</ol></li>
<li><p>实现访问内网网段</p>

<pre><code>#开启ipv4转发
[root@centos7 openvpn]# echo &#39;net.ipv4.ip_forward =1&#39; &gt;&gt; /etc/sysctl.conf                  [root@centos7 openvpn]# sysctl -p
net.ipv4.ip_forward = 1
[root@centos7 openvpn]# grep net.ip /etc/sysctl.conf                      
net.ipv4.ip_forward =1
#抓包
[root@centos7 openvpn]# tcpdump -i eth1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
22:41:22.362365 ARP, Request who-has 172.16.1.62 tell 172.16.1.201, length 28
22:41:22.362767 ARP, Reply 172.16.1.62 is-at 00:0c:29:e7:44:c0 (oui Unknown), length 46
22:41:22.362778 IP 10.8.0.6 &gt; 172.16.1.62: ICMP echo request, id 1, seq 329, length 40
22:41:27.032841 IP 10.8.0.6 &gt; 172.16.1.62: ICMP echo request, id 1, seq 330, length 40
22:41:32.032299 IP 10.8.0.6 &gt; 172.16.1.62: ICMP echo request, id 1, seq 331, length 40
22:41:37.032198 IP 10.8.0.6 &gt; 172.16.1.62: ICMP echo request, id 1, seq 332, length 40
#通过抓包可以发现数据包到达vpn的内部机器上没有返回

#解决方法1：在vpn的内部机器上添加返回路由或干脆把vpn server作为vpn内部机器的网关

#在vpn内部机器172.16.1.62上配置
[root@localhost ~]# ip a
3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:e7:44:c0 brd ff:ff:ff:ff:ff:ff
    inet 172.16.1.62/24 brd 172.16.1.255 scope global eth1
    inet6 fe80::20c:29ff:fee7:44c0/64 scope link 
       valid_lft forever preferred_lft forever
[root@localhost ~]# route add -net 10.8.0.0/24 gw 172.16.1.201
[root@localhost ~]# tcpdump -i eth1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
22:52:47.063020 IP 10.8.0.6 &gt; 172.16.1.62: ICMP echo request, id 1, seq 366, length 40
22:52:47.063044 IP 172.16.1.62 &gt; 10.8.0.6: ICMP echo reply, id 1, seq 366, length 40
22:52:48.063590 ARP, Request who-has 172.16.1.62 tell 172.16.1.201, length 46
22:52:48.063605 ARP, Reply 172.16.1.62 is-at 00:0c:29:e7:44:c0 (oui Unknown), length 28
22:52:48.065214 IP 10.8.0.6 &gt; 172.16.1.62: ICMP echo request, id 1, seq 367, length 40
22:52:48.065231 IP 172.16.1.62 &gt; 10.8.0.6: ICMP echo reply, id 1, seq 367, length 40
[root@localhost ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.0.0.0        0.0.0.0         255.255.255.0   U     0      0        0 eth0
10.8.0.0        172.16.1.201    255.255.255.0   UG    0      0        0 eth1
172.16.1.0      0.0.0.0         255.255.255.0   U     0      0        0 eth1
169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0
169.254.0.0     0.0.0.0         255.255.0.0     U     1003   0        0 eth1
0.0.0.0         10.0.0.254      0.0.0.0         UG    0      0        0 eth0
#或者：
route add default gw 172.16.1.201

#此方法虽然实现了访问vpn内部机器的功能，但是当vpn内部机器有很多台的时候此方法就不好了，所以有第二种方法：在vpn服务器上配置防火墙转发

iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth1 -j MASQUERADE
iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth1 -j SNAT --to-source 172.16.1.201
iptables -F
iptables -t nat -L -n
iptables -t filter -L -n
/etc/init.d/iptables save
/etc/init.d/iptables restart

[root@localhost ~]# tcpdump -i eth1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
23:51:59.411144 IP 172.16.1.201 &gt; 172.16.1.62: ICMP echo request, id 1, seq 393, length 40
23:51:59.411190 IP 172.16.1.62 &gt; 172.16.1.201: ICMP echo reply, id 1, seq 393, length 40
23:52:00.412799 IP 172.16.1.201 &gt; 172.16.1.62: ICMP echo request, id 1, seq 394, length 40
23:52:00.412819 IP 172.16.1.62 &gt; 172.16.1.201: ICMP echo reply, id 1, seq 394, length 40
</code></pre></li>
<li><p>openvpn客户端证书的撤销</p>

<ol>
<li><p>撤销单个证书</p>

<pre><code>[root@centos7 sample-config-files]# cd /etc/openvpn/easy-rsa/
[root@centos7 easy-rsa]# ls
build-ca        build-key-pkcs12  inherit-inter      openssl-1.0.0.cnf  vars.bak
build-dh        build-key-server  keys               pkitool            whichopensslcnf
build-inter     build-req         list-crl           revoke-full
build-key       build-req-pass    openssl-0.9.6.cnf  sign-req
build-key-pass  clean-all         openssl-0.9.8.cnf  vars
[root@centos7 easy-rsa]# source vars
NOTE: If you run ./clean-all, I will be doing a rm -rf on /etc/openvpn/easy-rsa/keys
[root@centos7 easy-rsa]# ./revoke-full vpnclient
Using configuration from /etc/openvpn/easy-rsa/openssl-1.0.0.cnf
Revoking Certificate 02.
Data Base Updated
Using configuration from /etc/openvpn/easy-rsa/openssl-1.0.0.cnf
vpnclient.crt: C = CN, ST = BJ, L = Beijing, O = user, OU = beyond, CN = vpnclient, name = beyond, emailAddress = 123@qq.com
error 23 at 0 depth lookup:certificate revoked
[root@centos7 easy-rsa]# ll keys/crl.pem 
-rw-r--r-- 1 root root 715 9月  11 00:42 keys/crl.pem
[root@centos7 easy-rsa]# cat keys/crl.pem 
-----BEGIN X509 CRL-----
MIIB5jCBzzANBgkqhkiG9w0BAQsFADCBiTELMAkGA1UEBhMCQ04xCzAJBgNVBAgT
AkJKMRAwDgYDVQQHEwdCZWlqaW5nMQ0wCwYDVQQKEwR1c2VyMQ8wDQYDVQQLEwZi
ZXlvbmQxDzANBgNVBAMTBm9sZGJveTEPMA0GA1UEKRMGYmV5b25kMRkwFwYJKoZI
hvcNAQkBFgoxMjNAcXEuY29tFw0xNzA5MTAxNjQyMDBaFw0xNzEwMTAxNjQyMDBa
MBQwEgIBAhcNMTcwOTEwMTY0MjAwWjANBgkqhkiG9w0BAQsFAAOCAQEAFPEKfUoF
wayBHlI1FE3prhAN53C0wJm0IUpwBuRDC8XbPLPMTX3dzps1Jmatw0BVX++IlvGJ
z7lrxZpFXPbCr44m9rDpOMHdbwgrqchMCpyBX4N3qRAd1rDXbeahb/n0GhRbPudD
EeRodU07aT9AQ5kpp0occPZsiSFuypwemegdan3l2KNus4vdABrE6bRpCfE1Xizb
NqKDNIf44ewvelP8m9XGR8o84hD5jgJtL2Cqx5Hfc7vxm8PIIn4Ne1KfdgT6U0pB
ssyXsAAMfTTrDiiazcu8PFaomMBhtDJghZLs1td5bkYSLbkpgT4hKQumcZgZqj9V
F4aCaqe6+wQjXA==
-----END X509 CRL-----
[root@centos7 easy-rsa]# cat keys/index.txt
V       270908104628Z           01      unknown /C=CN/ST=BJ/L=Beijing/O=user/OU=beyond/CN=vpnserver/name=beyond/emailAddress=123@qq.com
R       270908114426Z   170910164200Z   02      unknown /C=CN/ST=BJ/L=Beijing/O=user/OU=beyond/CN=vpnclient/name=beyond/emailAddress=123@qq.com
V       270908114810Z           03      unknown /C=CN/ST=BJ/L=Beijing/O=user/OU=beyond/CN=vpnbeyond/name=beyond/emailAddress=123@qq.com

#编辑vpn服务端配置文件增加如下配置
crl-verify /etc/openvpn/easy-rsa/keys/crl.pem
#重启服务
[root@centos7 easy-rsa]# systemctl restart openvpn@server.service 
[root@centos7 easy-rsa]# systemctl stop openvpn@server.service        
[root@centos7 easy-rsa]# ss -lntup|grep openvpn
[root@centos7 easy-rsa]# systemctl start openvpn@server.service   
[root@centos7 easy-rsa]# ss -lntup|grep openvpn                 
tcp    LISTEN     0      1         *:1194                  *:*                   users:((&quot;openvpn&quot;,pid=22972,fd=6))
</code></pre>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/83356688.jpg" alt=""/></p>

<p>此时会发现证书已吊销无法登陆。</p></li>
<li><p>取消撤销<br/>
如果发现撤销错误需要回退的时候只需要将配置文件中加的内容注释掉然后再重启服务即可。</p></li>
</ol></li>
<li><p>配置linux下vpn客户端<br/>
安装过程和linux下vpn server端一样</p></li>
</ol>

<hr/>

<h5 id="toc_0">启动：</h5>

<p>openvpn /etc/openvpn/vpnclient.ovpn</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卅二、NTP时间服务]]></title>
    <link href="http://note.ptzzy.top/15052921723963.html"/>
    <updated>2017-09-13T16:42:52+08:00</updated>
    <id>http://note.ptzzy.top/15052921723963.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>为什么需要NTP时间服务器</p>

<p>NTP 是提供一个时间标准, 系统软件对时间的精度要求非常严格, 相差个几秒或者几分钟, 会导致服务无法启动, 各种各样的报错</p>

<p>系统优化方面: 参加工作以后，把自己管理的服务器全部要排查时间同步<br/>
企业服务器:<br/>
同步公网的时间服务器的延迟：10ms-xxx秒<br/>
局域网时间服务器的延迟：&lt;1ms</p></li>
<li><p>服务端搭建ntpd</p>

<p>正确安装软件的理论：<br/>
①安装 ②配置 ③启动 ④使用软件<br/>
能够yum安装就yum安装；不能yum安装的，先编译安装然后自己打一个rpm包，然后yum安装</p>

<pre><code>[root@m01 ~]# yum -y install ntp
[root@m01 ~]# rpm -qa ntp
ntp-4.2.6p5-10.el6.centos.2.x86_64
</code></pre>

<p>ntp旧版本有漏洞，企业环境将他升级到最新版本，更简单方法，不给ntp时间服务器公网地址</p>

<ol>
<li><p>防火墙设置</p>

<pre><code>iptables -I INPUT -p udp -m udp --sport 123 -j ACCEPT  #对外开放123端口
</code></pre>

<p><mark>最好的办法</mark>是将所有linux系统的防火墙都关闭：</p>

<pre><code>chkconfig --level 2345 ip6tables off
chkconfig --level 2345 iptables off
service ip6tables stop
service iptables stop
</code></pre></li>
<li><p>配置/etc/ntp.conf</p>

<p>参考资料: <a href="http://jingyan.baidu.com/article/3c48dd347b3b75e10be35892.html">http://jingyan.baidu.com/article/3c48dd347b3b75e10be35892.html</a> </p>

<pre><code>cp /etc/ntp.conf{,.ori} 
cat&gt;/etc/ntp.conf&lt;&lt;EOF
driftfile /var/lib/ntp/drift
restrict default nomodify
restrict 127.0.0.1
restrict -6 ::1
server ntp1.aliyun.com
fudge ntp1.aliyun.com stratum 8
includefile /etc/ntp/crypto/pw
keys /etc/ntp/keys
EOF
</code></pre>

<ol>
<li><p>第一种配置：允许任何IP的客户机都可以进行时间同步</p>

<pre><code>restrict default nomodify notrap
</code></pre></li>
<li><p>第二种配置：只允许172.16.1.***网段的客户机进行时间同步</p>

<pre><code>restrict 172.16.1.0 mask 255.255.255.0 nomodify notrap
</code></pre></li>
</ol></li>
<li><p>启动</p>

<p>NTP时间服务器也有时间同步功能，发现自己系统时间不对，也会自己把自己的系统时间更新</p>

<pre><code>/etc/init.d/ntpd start
chkconfig --level 35 ntpd on
</code></pre>

<p>ntpd服务重启后,查看时间同步过程(如果服务是刚重启,需要等待几秒钟就能看到动态结果)</p>

<pre><code>[root@m01 ~]# watch ntpq -p
Every 2.0s: ntpq -p                                    Mon Aug 28 09:22:59 2017
remote             refid           st t when poll reach   delay   offset  jitter
==============================================================================
*time5.aliyun.co 10.137.38.86     2 u   55   64  377   10.240  1983.55 1043.58
</code></pre></li>
</ol></li>
<li><p>客户端同步时间</p>

<pre><code>[root@m01 ~]# ntpdate 10.0.0.61
25 Aug 09:41:00 ntpdate[37476]: the NTP socket is in use, exiting
</code></pre>

<p>在m01使用ntpdate命令会和ntp服务进程冲突，不能同时使用<br/>
客户端能正常同步的情况:</p>

<pre><code>[root@web02 ~]# ntpdate 172.16.1.61
25 Aug 09:44:03 ntpdate[29612]: adjust time server 10.0.0.61 offset -0.010470 sec
</code></pre>

<p>所有客户端加入定时任务</p>

<pre><code>[root@lb02 ~]# crontab -l
*/5 * * * * /usr/sbin/ntpdate 10.0.0.61 &gt;/dev/null 2&gt;&amp;1
</code></pre></li>
<li><p>无法同步的情况</p>

<pre><code>[root@lb02 ~]# ntpdate 172.16.1.61
15 Aug 16:35:02 ntpdate[29611]: no server suitable for synchronization found
</code></pre>

<p>使用-d debug调试</p>

<pre><code>[root@web02 ~]# ntpdate -d 172.16.1.61
30 Aug 00:41:45 ntpdate[73624]: ntpdate 4.2.6p5@1.2349-o Mon Feb  6 07:22:46 UTC 2017 (1)
Looking for host 172.16.1.61 and service ntp
host found : m01
transmit(172.16.1.61)
receive(172.16.1.61)
transmit(172.16.1.61)
receive(172.16.1.61)
transmit(172.16.1.61)
receive(172.16.1.61)
transmit(172.16.1.61)
receive(172.16.1.61)
172.16.1.61: Server dropped: strata too high
server 172.16.1.61, port 123
stratum 16, precision -23, leap 11, trust 000
refid [172.16.1.61], delay 0.02571, dispersion 0.00000
transmitted 4, in filter 4
reference time:    00000000.00000000  Mon, Jan  1 1900  8:05:43.000
originate timestamp: dd5017d3.378721d8  Wed, Aug 30 2017  0:41:55.216
transmit timestamp:  dd5017c9.6a0d13f1  Wed, Aug 30 2017  0:41:45.414
filter delay:  0.02588  0.02576  0.02577  0.02571
         0.00000  0.00000  0.00000  0.00000
filter offset: 9.802604 9.802566 9.802544 9.802574
         0.000000 0.000000 0.000000 0.000000
delay 0.02571, dispersion 0.00000
offset 9.802574

30 Aug 00:41:45 ntpdate[73624]: no server suitable for synchronization found
[root@web02 ~]#
</code></pre>

<p>以下内容引自: <a href="http://www.blogjava.net/spray/archive/2008/07/10/213964.html">http://www.blogjava.net/spray/archive/2008/07/10/213964.html</a></p>

<ol>
<li><p>错误1.Server dropped: Strata too high</p>

<p>在ntp客户端用ntpdate –d serverIP查看，发现有“Server dropped: strata too high”的错误，并且显示“stratum 16”。而正常情况下stratum这个值得范围是“0~15”。这是因为NTP server还没有和其自身或者它的上级server同步上。</p>

<p>以下的定义是让NTP Server和其自身保持同步，如果在/ntp.conf中定义的server都不可用时，将使用local时间作为ntp服务提供给ntp客户端。</p>

<pre><code>server 127.127.1.0
fudge 127.127.1.0 stratum 8 
</code></pre>

<p>在ntp server上重新启动ntp服务后，ntp server自身或者与其server的同步的需要一个时间段，这个过程可能是5分钟，在这个时间之内在客户端运行ntpdate命令时会产生no server suitable for synchronization found的错误。</p>

<p>那么如何知道何时ntp server完成了和自身同步的过程呢？<br/>
在ntp server上使用命令：</p>

<pre><code>watch ntpq -p
</code></pre>

<p>出现画面：</p>

<pre><code>Every 2.0s: ntpq -p                                     Thu Jul 10 02:28:32 2008
     remote           refid      st t when poll reach   delay   offset jitter
==============================================================================
 192.168.30.22   LOCAL(0)         8 u   22   64    1    2.113 179133.   0.001
  LOCAL(0)        LOCAL(0)        10 l   21   64    1    0.000   0.000  0.001
  ```

注意LOCAL的这个就是与自身同步的ntp server。
注意reach这个值，在启动ntp server服务后，这个值就从0开始不断增加，当增加到17的时候，从0到17是5次的变更，每一次是poll的值的秒数，是64秒*5=320秒的时间。
如果之后从ntp客户端同步ntp server还失败的话，用ntpdate –d来查询详细错误信息，再做判断。
</code></pre></li>
<li><p>错误2.Server dropped: no data<br/>
从客户端执行netdate –d时有错误信息如下：</p>

<pre><code>transmit(192.168.30.22)
transmit(192.168.30.22)
transmit(192.168.30.22)
transmit(192.168.30.22)
transmit(192.168.30.22)
192.168.30.22: Server dropped: no data
server 192.168.30.22, port 123
.....
28 Jul 17:42:24 ntpdate[14148]: no server suitable for synchronization found
</code></pre>

<p>出现这个问题的原因可能有2：</p>

<ol>
<li><p>检查ntp的版本，如果你使用的是ntp4.2（包括4.2）之后的版本，在restrict的定义中使用了notrust的话，会导致以上错误。解决：把notrust去掉。</p>

<pre><code>rpm -qa ntp #检查版本命令, 也可使用 ntpq -c version
</code></pre></li>
<li><p>检查ntp server的防火墙。可能是server的防火墙屏蔽了upd 123端口。</p>

<pre><code>service iptables stop
</code></pre></li>
</ol></li>
</ol></li>
<li><p>ntpd与ntpdate的区别</p></li>
</ol>

<blockquote>
<p>以下内容源自: <a href="http://www.cnblogs.com/liuyou/archive/2012/07/29/2614330.html">http://www.cnblogs.com/liuyou/archive/2012/07/29/2614330.html</a><br/>
之前配置ntpd的时候搜到一句话，印象很深刻，也觉得很有标题党的效果，就借鉴为标题了：<br/>
“我认为有几种人是必须不招聘/裁掉的： 1 用ntpdate代替ntpd的人”<br/>
但具体原因不太懂，总觉得还是用ntpdate比较方便。<br/>
今天问了红帽技术支持，对方的解释是：<br/>
ntpd在实际同步时间时是一点点的校准过来时间的，最终把时间慢慢的校正对。而ntpdate不会考虑其他程序是否会阵痛，直接调整时间。<br/>
一个是校准时间，一个是调整时间。<br/>
以下是一个形象的假设：<br/>
linuxtone限制用户注册1小时才能发帖。<br/>
数据库服务器在 10：00分接受了我的注册邀请；<br/>
10：03分，ntpdate将数据库时间强行改成9：35分；<br/>
然后10：05分（9：37分）我尝试发帖，系统判断我注册时间是否满一小时会使用：9：37 - 10：00<br/>
最后电脑就逻辑混乱了。。。<br/>
类似的帖子网上也有很详细的说明，贴出来给大家看看：<br/>
时钟的跃变，有时候会导致很严重的问题。许多应用程序依赖连续的时钟??毕竟，这是一项常见的假定，即，取得的时间是线性的，一些操作，例如数据库事务，通常会地依赖这样的事实：时间不会往回跳跃。<br/>
不幸的是，ntpdate调整时间的方式就是我们所说的”跃变“：在获得一个时间之后，ntpdate使用settimeofday(2)设置系统时间，这有几个非常明显的问题：<br/>
第一，这样做不安全。ntpdate的设置依赖于ntp服务器的安全性，攻击者可以利用一些软件设计上的缺陷，拿下ntp服务器并令与其同步的服务器执行某些消耗性的任务。由于ntpdate采用的方式是跳变，跟随它的服务器无法知道是否发生了异常（时间不一样的时候，唯一的办法是以服务器为准）。<br/>
第二，这样做不精确。一旦ntp服务器宕机，跟随它的服务器也就会无法同步时间。与此不同，ntpd不仅能够校准计算机的时间，而且能够校准计算机的时钟。<br/>
第三，这样做不够优雅。由于是跳变，而不是使时间变快或变慢，依赖时序的程序会出错（例如，如果ntpdate发现你的时间快了，则可能会经历两个相同的时刻，对某些应用而言，这是致命的）。<br/>
因而，唯一一个可以令时间发生跳变的点，是计算机刚刚启动，但还没有启动很多服务的那个时候。其余的时候，理想的做法是使用ntpd来校准时钟，而不是调整计算机时钟上的时间。<br/>
NTPD 在和时间服务器的同步过程中，会把 BIOS 计时器的振荡频率偏差??或者说 Local Clock 的自然漂移(drift)??记录下来。这样即使网络有问题，本机仍然能维持一个相当精确的走时。<br/>
最后提醒一下使用vmware的各位，因为虚拟机的时钟不太正常，比正常速度慢好多秒，所以在虚拟机上测试ntpd很难得到理想的结果，我当年就是为这个问题耽搁了好几天。。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis简单入门及实现wordpress数据库缓存]]></title>
    <link href="http://note.ptzzy.top/15052628837678.html"/>
    <updated>2017-09-13T08:34:43+08:00</updated>
    <id>http://note.ptzzy.top/15052628837678.html</id>
    <content type="html"><![CDATA[
<p>redis简介<br/>
Remote Dictionary Server（Redis）是一个基于 key-value 键值对的持久化数据库存储系统。支持多种数据结构，包括 string (字符串)、list (链表)、set (集合)、zset (sorted set --有序集合)和 hash（哈希类型）。<br/>
redis和memcached的区别<br/>
Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等；<br/>
Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储；<br/>
虚拟内存--Redis当物理内存用完时，可以将一些很久没用到的value 交换到磁盘；<br/>
过期策略--memcache在set时就指定，例如set key1 0 0 8,即永不过期。Redis可以通过例如expire 设定，例如expire name 10；<br/>
分布式--设定memcache集群，利用magent做一主多从;redis可以做一主多从。<br/>
存储数据安全--memcache挂掉后，数据没了；redis可以定期保存到磁盘（持久化）；<br/>
灾难恢复--memcache挂掉后，数据不可恢复; redis数据丢失后可以恢复；<br/>
Redis支持数据的备份，即master-slave模式的数据备份；<br/>
应用场景不一样：Redis除了作为NoSQL数据库使用外，还能用做消息队列、数据堆栈和数据缓存等；Memcached适合于缓存SQL语句、数据集、用户临时性数据、延迟查询数据和session等<br/>
性能对比：由于Redis只使用单核，而Memcached可以使用多核，所以平均每一个核上Redis在存储小数据时比Memcached性能更高。而在100k以上的数据中，Memcached性能要高于Redis，虽然Redis最近也在存储大数据的性能上进行优化，但是比起 Memcached，还是稍有逊色。<br/>
内存使用效率对比：使用简单的key-value存储的话，Memcached的内存利用率更高，而如果Redis采用hash结构来做key-value存储，由于其组合式的压缩，其内存利用率会高于Memcached。<br/>
Redis支持服务器端的数据操作：Redis相比Memcached来说，拥有更多的数据结构和并支持更丰富的数据操作，通常在Memcached 里，你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。在Redis中，这些复杂的操作通常和一般的 GET/SET一样高效。所以，如果需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。<br/>
redis服务端的安装<br/>
中文帮助文档<br/>
<a href="http://redisdoc.com/">http://redisdoc.com/</a><br/>
在lb01   10.0.0.5（172.16.1.5）上操作：<br/>
下载地址：<br/>
wget  <a href="http://download.redis.io/releases/redis-3.2.10.tar.gz">http://download.redis.io/releases/redis-3.2.10.tar.gz</a><br/>
安装：<br/>
tar zxf redis-3.2.10.tar.gz <br/>
cd redis-3.2.10<br/>
make<br/>
make install<br/>
拷贝启动文件：<br/>
cd utils/<br/>
cp redis_init_script /etc/init.d/redis<br/>
chmod +x /etc/init.d/redis<br/>
拷贝配置文件：<br/>
mkdir /etc/redis<br/>
cd ..<br/>
cp redis.conf /etc/redis/6379.conf<br/>
/etc/init.d/redis start<br/>
此时会看到redis是在前台运行需要修改配置文件让其在后台运行并且开启持久化：<br/>
持久化有两种方式：<br/>
1.rdb（快照默认开启）二进制文件<br/>
2.aof（类似于mysql的binlog功能）操作语句保存在文件中<br/>
sed -i &#39;s/daemonize no/daemonize yes/;s/appendonly no/appendonly yes/;163c logfile &quot;/var/log/redis.log&quot;&#39; /etc/redis/6379.conf<br/>
sed -i &#39;247c dir  /tmp&#39; /etc/redis/6379.conf<br/><br/>
sed -i &#39;s/bind 127.0.0.1/bind 127.0.0.1 172.16.1.5 /g&#39; /etc/redis/6379.conf<br/>
/etc/init.d/redis start<br/>
查看端口是否启动成功：<br/>
[root@lb01 ~]# netstat -lntup|grep redis<br/>
tcp        0      0 127.0.0.1:6379              0.0.0.0:*                   LISTEN      58534/redis-server<br/>
测试：<br/>
[root@lb01 ~]# redis-cli <br/>
127.0.0.1:6379&gt; set key1 hellword<br/>
OK<br/>
127.0.0.1:6379&gt; get key1<br/>
&quot;hellword&quot;<br/>
127.0.0.1:6379&gt; quit<br/>
查看帮助：<br/>
redis-cli --help<br/>
安装redis php客户端<br/>
下载地址：<br/>
wget <a href="http://pecl.php.net/get/redis-2.2.3.tgz">http://pecl.php.net/get/redis-2.2.3.tgz</a><br/>
添加模块<br/>
tar zxf redis-2.2.3.tgz<br/>
cd redis-2.2.3<br/>
/application/php/bin/phpize<br/>
./configure --with-php-config=/application/php/bin/php-config<br/>
make &amp;&amp; make install<br/>
修改配置文件并重启<br/>
echo &quot;extension = redis.so&quot; &gt;&gt;/application/php/lib/php.ini<br/>
killall php-fpm<br/>
/application/php/sbin/php-fpm<br/>
wordpress实现redis数据库缓存<br/>
需要一个客户端开发包以便PHP可以连接到redis服务端 ，这里推荐predis. 加入WordPress的根目录，执行下面<br/>
cd /application/nginx/html/blog wget <a href="http://uploads.staticjw.com/ji/jim/predis.php">http://uploads.staticjw.com/ji/jim/predis.php</a>  chown nginx.nginx predis.php<br/>
前端缓存的PHP脚本，加入WordPress的根目录，执行下面<br/>
wget <a href="https://gist.githubusercontent.com/JimWestergren/3053250/raw/d9e279e31cbee4a1520f59108a4418ae396b2dde/index-with-redis.php">https://gist.githubusercontent.com/JimWestergren/3053250/raw/d9e279e31cbee4a1520f59108a4418ae396b2dde/index-with-redis.php</a>  chown nginx.nginx index-with-redis.php<br/>
根据自己需求修改index-with-redis.php，修改如下：<br/>
\(cf = 0;                // set to 1 if you are using cloudflare  \)debug = 1;              // set to 1 if you wish to see execution time and cache actions  $display_powered_by_redis = 0; // set to 1 if you want to display a powered by redis message with execution time, see below<br/>
替换index.php<br/>
 mv index.php index.php.bak   mv index-with-redis.php index.php<br/>
修改predis文件信息<br/>
sed -i &#39;s/127.0.0.1/172.16.1.5/g&#39; predis.php<br/>
[root@web02 blog]# grep 172.16.1.5 predis.php <br/>
    const DEFAULT_HOST = &#39;172.16.1.5&#39;;<br/>
打开网页测试：<br/>
在redis服务器执行：<br/>
[root@lb01 ~]# redis-cli -h 172.16.1.5<br/>
172.16.1.5:6379&gt; keys *<br/>
1) &quot;count&quot;<br/>
2) &quot;key1&quot;<br/>
3) &quot;feaeb784f8a27e2af7166667a5f084fb&quot;<br/>
[root@lb01 tmp]# tail -5 /tmp/appendonly.aof<br/><br/>
<script type='text/javascript' src='http://blog.etiantian.org/wp-content/themes/twentysixteen/js/functions.js?ver=20160816'></script><br/>
<script type='text/javascript' src='http://blog.etiantian.org/wp-includes/js/wp-embed.min.js?ver=4.8.1'></script><br/>
</body><br/>
</html><br/>
redis实现session共享<br/>
修改php的配置文件php.ini<br/>
session.save_handler = redis<br/>
session.save_path = &quot;tcp://172.16.1.5:6379&quot;<br/>
重启php即可<br/>
redis的主从复制<br/>
Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下：</p>

<p>从服务器连接主服务器，发送SYNC命令；<br/>
 主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令；<br/>
 主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；<br/>
 从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；<br/>
 主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； <br/>
从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</p>

<p>Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。  增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</p>

<p>vim /etc/redis/6379.conf</p>

<p>logfile &quot;/var/log/redis_6379.log&quot;<br/>
dbfilename dump_6379.rdb<br/>
appendfilename &quot;appendonly_6379.aof&quot;</p>

<p>/etc/init.d/redis stop<br/>
/etc/init.d/redis start<br/>
[root@lb01 tmp]# ls /tmp<br/>
appendonly_6379.aof  appendonly.aof  dump.rdb<br/>
拷贝配置文件并修改<br/>
cd /etc/redis/<br/>
cp 6379.conf 6380.conf<br/>
sed -i &#39;s/6379/6380/g&#39; 6380.conf<br/>
diff 6379.conf 6380.conf </p>

<p>/usr/local/bin/redis-server 6380.conf </p>

<p>[root@lb01 redis]# ps aux |grep redis <br/>
root      59357  0.1  0.7 133544  7524 ?        Ssl  11:42   0:01 /usr/local/bin/redis-server 127.0.0.1:6379<br/><br/>
root      59379  0.0  0.7 133544  7520 ?        Ssl  11:59   0:00 /usr/local/bin/redis-server 127.0.0.1:6380</p>

<p>[root@lb01 redis]# ls /tmp<br/>
appendonly_6379.aof  appendonly_6380.aof  appendonly.aof  dump.rdb<br/>
redis-cli -p 6380<br/>
开启主从复制功能<br/>
127.0.0.1:6380&gt; SLAVEOF 172.16.1.5 6379<br/>
OK<br/>
127.0.0.1:6380&gt; info<br/>
......</p>

<h1 id="toc_0">Replication</h1>

<p>role:slave<br/>
master_host:172.16.1.5<br/>
master_port:6379<br/>
master_link_status:up<br/>
master_last_io_seconds_ago:3<br/>
......<br/>
查看主机状态<br/>
172.16.1.5:6379&gt; info<br/>
......</p>

<h1 id="toc_1">Replication</h1>

<p>role:master<br/>
connected_slaves:1<br/>
slave0:ip=127.0.0.1,port=6380,state=online,offset=169,lag=1<br/>
master_repl_offset:169<br/>
......<br/>
测试主从复制功能<br/>
主库写入<br/>
172.16.1.5:6379&gt; set key test<br/>
OK<br/>
从库查询<br/>
127.0.0.1:6380&gt; keys *<br/>
1) &quot;count&quot;<br/>
2) &quot;key&quot;<br/>
redis cluster集群<br/>
redis本身是单实例单进程的<br/>
参考文档<br/>
<a href="http://www.cnblogs.com/wuxl360/p/5920330.html">http://www.cnblogs.com/wuxl360/p/5920330.html</a> </p>

<p>redis管理工具<br/>
cd /application/nginx/html/blog<br/>
git clone <a href="https://github.com/ErikDubbelboer/phpRedisAdmin.git">https://github.com/ErikDubbelboer/phpRedisAdmin.git</a> <br/>
cd phpRedisAdmin <br/>
git clone <a href="https://github.com/nrk/predis.git">https://github.com/nrk/predis.git</a> vendor<br/>
更改配置文件添加多实例<br/>
/application/nginx/html/blog/phpRedisAdmin/includes<br/>
vim config.sample.inc.php<br/>
......<br/>
$config = array(<br/>
  &#39;servers&#39; =&gt; array(<br/>
    array(<br/>
      &#39;name&#39;   =&gt; &#39;6379&#39;, // Optional name.<br/>
      &#39;host&#39;   =&gt; &#39;172.16.1.5&#39;,<br/>
      &#39;port&#39;   =&gt; 6379,<br/>
      &#39;filter&#39; =&gt; &#39;*&#39;,<br/>
      &#39;scheme&#39; =&gt; &#39;tcp&#39;,<br/>
      &#39;path&#39;   =&gt; &#39;&#39;<br/>
    ),<br/>
    array(<br/>
      &#39;name&#39; =&gt; &#39;6380&#39;,<br/>
      &#39;host&#39; =&gt; &#39;172.16.1.5&#39;,<br/>
      &#39;port&#39; =&gt; 6380<br/>
    ),<br/>
......<br/>
浏览器输入<a href="http://blog.etiantian.org/phpRedisAdmin/%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE">http://blog.etiantian.org/phpRedisAdmin/即可访问</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下获取公网IP地址的方法]]></title>
    <link href="http://note.ptzzy.top/15051981760993.html"/>
    <updated>2017-09-12T14:36:16+08:00</updated>
    <id>http://note.ptzzy.top/15051981760993.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>curl 纯文本格式输出:<br/>
推荐使用</p>

<pre><code>curl ipinfo.io/ip
</code></pre>

<p>备选</p>

<pre><code>curl ipinfo.io
curl ifconfig.me
curl icanhazip.com
curl ifconfig.me
curl curlmyip.com
curl ip.appspot.com
curl ipecho.net/plain
curl www.trackip.net/i
curl http://members.3322.org/dyndns/getip 
</code></pre></li>
<li><p>curl JSON格式输出:</p>

<pre><code>curl ipinfo.io/json
curl ifconfig.me/all.json
curl www.trackip.net/ip?json  #(有点丑陋)
</code></pre></li>
<li><p>curl XML格式输出:</p>

<pre><code>curl ifconfig.me/all.xml
</code></pre></li>
<li><p>curl 得到所有IP细节 （挖掘机）</p>

<pre><code>curl ifconfig.me/all
</code></pre></li>
<li><p>使用 DYDNS （当你使用 DYDNS 服务时有用）</p>

<pre><code>curl -s &#39;http://checkip.dyndns.org&#39; | sed &#39;s/.*Current IP Address: \([0-9\.]*\).*/\1/g&#39;
curl -s http://checkip.dyndns.org/ | grep -o &quot;[[:digit:].]\+&quot;
</code></pre></li>
<li><p>使用 Wget 代替 Curl</p>

<pre><code>wget http://ipecho.net/plain -O - -q ; echo
wget http://observebox.com/ip -O - -q ; echo
</code></pre></li>
<li><p>使用 host 和 dig 命令</p>

<blockquote>
<p>如果有的话，你也可以直接使用 host 和 dig 命令。</p>
</blockquote>

<pre><code>host -t a dartsclink.com | sed &#39;s/.*has address //&#39;
dig +short myip.opendns.com @resolver1.opendns.com
</code></pre></li>
<li><p>bash 脚本示例:</p>

<pre><code>#!/bin/bash
PUBLIC_IP=`wget http://ipecho.net/plain -O - -q ; echo`
echo $PUBLIC_IP
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卅一、Keepalived部署]]></title>
    <link href="http://note.ptzzy.top/15051477961930.html"/>
    <updated>2017-09-12T00:36:36+08:00</updated>
    <id>http://note.ptzzy.top/15051477961930.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>VRRP协议原理 </p>

<ol>
<li>VRRP协议，全称Virtual Router Redundancy Protocol，中文名为虚拟路由冗余协议，VRRP的出现是为了解决静态路由的单点故障。</li>
<li>VRRP是用过IP多播的方式（默认多播地址（224.0.0.18））实现高可用对之间通信的。</li>
<li><p>工作时主节点发包，备节点接包，当备节点接收不到主节点发的数据包的时候，就启动接管程序接管主节点的资源。备节点可以有多个，通过优先级竞选，但一般Keepalived系统运维工作中都是一对。</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/77060938.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/93570182.jpg" alt=""/></p></li>
</ol></li>
<li><p>Keepalived高可用软件功能<br/>
参考博文: <a href="http://www.cnblogs.com/pricks/p/3822232.html">http://www.cnblogs.com/pricks/p/3822232.html</a> </p>

<ol>
<li><p>管理LVS负载均衡软件<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/63547204.jpg" alt=""/></p></li>
<li><p>实现对LVS集群节点健康检查功能--healthcheck</p>

<p>keepalived可能通过在自身的keepalived.conf文件里配置LVS节点IP和相关的参数实现对LVS的直接管理,除此之外,当LVS集群中的一个甚至几个节点服务器同时发生故障无法提供服务时,keepalived服务会自启动将失效的节点服务器从LVS的正常转发队列中清除出去，并将请求调度到正常节点的服务器上，从而保证最终用户的访问不受影响，当故障的节点服务器被修复后,keepalived服务会自动把它们加入到正常的转发队列中,对客户提供服务.</p></li>
<li><p>作为系统网络服务的高可用功能--failover</p>

<p>keepalived可以实现任意两台主机之间,例如Master和Backup主机之间的故障转移和自动切换,这个主机可以是普通的不能停机的业务服务器,也可以是LVS负载均衡,nginx反向代理这样的服务器.</p>

<p>keepalived高可用功能实现的简单原理为:两台主机同时安装好keepalived软件并启动服务,开始正常工作时,由角色Master的主机获得所有资源并对用户提供用户,角色为Backup的主机将自动接管Master主机的所有工作,包括接管VIP资源及相应资源服务,而当master的主机故障修复后,又会自动接管回它原来的处理的工作,角色为backup的主机则同时释放master主机失效时它按管的工作,此时,两台主机将恢复到最初启动时各自的原始角色及工作状态.</p></li>
</ol></li>
<li><p>简单实现web集群的高可用(单实例VIP漂移)</p>

<ol>
<li>安装依赖包, 部署nginx</li>
<li><p>安装并启动Keepalived<br/>
<code><br/>
yum install -y keepalived<br/>
rpm -qa keepalived<br/>
rpm -ql keepalived<br/>
/etc/init.d/keepalived start<br/>
ip a #查看主备情况<br/>
</code></p></li>
<li><p>Keepalived配置文件修改: /etc/keepalived/keepalived.conf</p>

<p>配置文件的组成部分<br/>
· GLOBAL CONFIGURATION     # 全局定义（默认配置文件的01-13行）<br/>
· VRRPD CONFIGURATION      # 虚拟ip的配置（默认配置文件15-30行）<br/>
· LVS CONFIGURATION        # 配置与管理lvs</p>

<ol>
<li><p>lb01 Keepalived配置</p>

<pre><code>global_defs {
   router_id LVS_01
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 150
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
     10.0.0.3/24  dev eth0 label eth0:1
    }
}
</code></pre></li>
<li><p>lb02 Keepalived配置</p>

<pre><code>global_defs {
   router_id LVS_02           # 虚拟路由标识, 局域网内要唯一
}

vrrp_instance VI_1 {          # vrrp实例名
    state BACKUP               # 主备角色
    interface eth0             # 虚拟ip所在的网卡位置
    virtual_router_id 51      # 虚拟路由组标识, 同一个负载集群的必须相同
    priority 100               # 默认是100, 数值越大优先级越高
    advert_int 1               # 主备通讯时间间隔(秒)
    authentication {
        auth_type PASS         # 主备通讯加密类型
        auth_pass 1111         # 主备通讯认证密码
    }
    virtual_ipaddress {
     10.0.0.3/24  dev eth0 label eth0:1   # 虚拟ip配置
    }
}
</code></pre></li>
</ol></li>
<li><p>统一lb01/lb02的nginx配置文件nginx.conf </p>

<pre><code>worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
    upstream server_pools {
        server 10.0.0.7 ;
        server 10.0.0.8 ;
        server 10.0.0.9 ;
    }
    server {
        listen 80;
        server_name bbs.etiantian.org ;
        location / {
        proxy_pass http://server_pools ;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        }
        access_log  logs/access_www.log   main;
   }
     server {
        listen 80;
        server_name www.etiantian.org ;
        location / {
        proxy_pass http://server_pools ;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        }
       access_log  logs/access_blog.log  main;
   }
}
</code></pre></li>
<li><p>重启两个服务</p>

<pre><code>nginx -t
nginx -s reload
/etc/init.d/keepalived reload
</code></pre></li>
<li><p>修改Windows hosts文件</p>

<pre><code>10.0.0.3  www.etiantian.org  blog.etiantian.org bbs.etiantian.org
</code></pre></li>
<li><p>浏览器测试+Wireshark抓包测试</p>

<h5 id="toc_0">测试实验操作</h5>

<ol>
<li>抓取vrrp协议包检查看看</li>
<li>关闭主，测试主备切换</li>
<li>重新开启主，测试主的抢占功能</li>
</ol>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/59051863.jpg" alt=""/></p>

<h5 id="toc_1">lb01Keepalived停掉:</h5>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/43066305.jpg" alt=""/></p></li>
</ol></li>
<li><p>配置文件详解<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/68684154.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/8764913.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/2188686.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/75353371.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/44072065.jpg" alt=""/></p></li>
<li><p>主从切换后执行的脚本</p>

<p>notify_master /path/to/to_master.sh：表示当切换到master状态时，要执行的脚本<br/>
notify_backup /path/to/to_backup.sh：表示当切换到backup状态时，要执行的脚本<br/>
注意点: VIP漂移后, 获得VIP的主机对to_master.sh的执行会<mark>优先于</mark>另一主机执行to_backup.sh</p></li>
<li><p>Keepalived重点故障: 脑裂</p>

<p>指的是MASTER和BACKUP都获得了vip, 这种情况发生在二者的通讯发生异常中断时, BACKUP没收到MASTER的组播信号, 主动取代了MASTER</p>

<p><mark>注意</mark>: 使用关网卡这种方法模拟宕机测试VIP漂移时, 也会出现脑裂, 建议使用/etc/init.d/keepalived stop模拟宕机</p>

<ol>
<li><p>原因排查</p>

<p>一般来说,裂脑的问题,有以下几种原因:<br/>
高可用服务器对之间的心跳线链接发生故障,导致无法正常通信<br/>
心跳线坏了(包括 断了,老化)<br/>
网卡及相关驱动坏了,IP 配置及冲突问题(网卡直接)<br/>
心跳线连接的设备故障(网卡及交换机)<br/>
仲裁的机器出问题(采用仲裁的方案)<br/>
高可用服务器上开启了iptables防火墙阻挡了心跳消息传输<br/>
高可用服务器上心跳网卡地址等信息配置不正确,导致发送心跳失败.<br/>
其他服务器配置不当等原因,如心跳方式不同,心跳广播冲突,软件Bug等.</p>

<p>排查位置: 1 防火墙 ; 2 网络线路异常<br/>
解决方案: 1两条心跳线 ; 2 脑裂监控报警脚本</p>

<pre><code>vim monitor_keepalived.sh
#!/bin/bash
if [ ip a|grep -c 10.0.0.3 ]
then
  echo &quot;master error&quot;
fi
</code></pre></li>
<li><p>解决方案<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/93722011.jpg" alt=""/></p></li>
</ol></li>
<li><p>实现lb只监听VIP虚拟地址</p>

<ol>
<li><p>统一修改lb01/lb02的nginx监听地址</p>

<pre><code>worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
    upstream server_pools {
        server 10.0.0.7;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
    upstream server_pools {
        server 10.0.0.7;
        server 10.0.0.8;
        server 10.0.0.9;
    }
    server {
        listen 10.0.0.3:80;
        server_name bbs.etiantian.org;
        location / {
        proxy_pass http://server_pools;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        }
        }
        access_log  logs/access_www.log  main;
    }
    server {
        listen 10.0.0.3:80;
        server_name www.etiantian.org;
        location / {
        proxy_pass http://server_pools;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        }
        access_log  logs/access_blog.log  main;
    }
}
</code></pre>

<p><mark>注意点:</mark><br/>
在修改反向代理服务器配置文件监听地址时，多个server都需要配置监听地址，否则仍旧使用默认监听所有</p>

<p>listen <mark>10.0.0.3:</mark>80; 修改后的配置,只监听10.0.0.3这一个VIP<br/>
listen 80; 默认配置, 监听所有网络请求, 监听范围更大, 使监听VIP的限制失效</p></li>
<li><p>配置检测nginx -t</p>

<h5 id="toc_2">lb01</h5>

<pre><code>[root@lb01 ~]# nginx -t
nginx: the configuration file /application/nginx-1.10.3//conf/nginx.conf syntax is ok
nginx: configuration file /application/nginx-1.10.3//conf/nginx.conf test is successful
</code></pre>

<h5 id="toc_3">lb02</h5>

<pre><code>[root@lb02 ~]# nginx -t
nginx: the configuration file /application/nginx-1.10.3//conf/nginx.conf syntax is ok
nginx: [emerg] bind() to 10.0.0.3:80 failed (99: Cannot assign requested address)
nginx: configuration file /application/nginx-1.10.3//conf/nginx.conf test failed
</code></pre>

<ol>
<li><p>实际问题:lb02配置监听10.0.0.3失败</p>

<p>原因: 因为lb01正常运行, 而lb02未获取VIP, 所以无法监听本地不存在的ip地址 <br/>
解决方法：</p>

<pre><code># 修改内核配置文件, 取消本地IP绑定
# 永久生效
echo &#39;net.ipv4.ip_nonlocal_bind = 1&#39; &gt;&gt;/etc/sysctl.conf
sysctl -p #加载sysctl.conf
# 内存临时生效
echo &quot;1&quot; &gt;/proc/sys/net/ipv4/ip_nonlocal_bind
</code></pre></li>
</ol></li>
</ol></li>
<li><p>实现keepalived监控nginx运行状态并及时作出响应</p>

<ol>
<li><p>第一个里程碑-keepalived监控nginx条件</p>

<blockquote>
</blockquote>

<ol>
<li><p>如何得知nginx挂了?</p>

<p>1）端口<br/>
2）进程<br/>
<code>ps -ef |grep nginx |grep -v grep |wc -l</code></p></li>
<li><p>模拟keepalived挂了</p>

<p><code>/etc/init.d/keepalived stop</code></p></li>
</ol></li>
<li><p>第二个里程碑-根据条件-书写脚本</p>

<p>复习知识: shell脚本中的数值判断</p>

<pre><code>#&gt;  -gt    greater than  
#&gt;= -ge    greater equal 
#&lt;  -lt    less than 
#&lt;= -le    less equal 
#== -eq    equal
</code></pre>

<p>统一脚本存放路径</p>

<pre><code>mkdir -p /server/scripts
cd /server/scripts
</code></pre>

<p>编写检查脚本</p>

<pre><code>#!/bin/bash
#name: check_web.sh
#desc: check nginx and kill keepalived 
grep_num=`ps -ef |grep -c [n]ginx`  #grep [n]ginx: 利用正则排除(grep nginx)进程
echo $grep_num
if [ $grep_num -eq 2 ];then
   echo &#39;nginx is running.&#39;
else
   echo &#39;nginx stopped.&#39;
   /etc/init.d/keepalived stop
fi
</code></pre>

<p>注意:如果命名为check_nginx.sh,执行ps -ef |grep -c [n]ginx时, 结果会+1, 因为进程中临时会多出来一个 /bin/bash check_nginx.sh</p></li>
<li><p>第三个里程碑-为脚本添加x权限(不需要修改属主)</p>

<pre><code>chmod +x /server/scripts/check_web.sh #不加X权限会导致脚本不能被成功执行
ls -l /server/scripts/check_web.sh
</code></pre></li>
<li><p>第四个里程碑-测试脚本</p>

<pre><code>nginx -s stop
sh /server/scripts/check_web.sh
</code></pre></li>
<li><p>第五个里程碑-将脚本引入到lb01的keepalived.conf </p>

<pre><code>global_defs {
   router_id LVS_01
}

vrrp_script check_web {                     # 使用一个脚本模块
script &quot;/server/scripts/check_web.sh&quot;      # 脚本路径
interval 2                                    # 脚本执行的时间间隔(秒)
weight 2                                      # 脚本每运行成功一次,priority-2
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 150
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        10.0.0.3/24 dev eth0 label eth0:1
    }
   track_script {                              # 引用脚本
         check_web
   }
}
</code></pre></li>
<li><p>第六个里程碑-测试</p>

<pre><code>lb01
nginx
/etc/init.d/keepalived restart
nginx -s stop
ps -ef |grep [k]eep
</code></pre></li>
</ol></li>
<li><p>lb01/02双主配置</p>

<p>实现目标: 将用户请求压力按www与bbs分离, 实现:<br/>
访问www.etiantian.org时, lb01为主,lb02为备<br/>
访问bbs.etiantian.org时, lb02为主,lb01为备<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/78136168.jpg" alt=""/></p>

<ol>
<li><p>lb集群的Keepalived配置<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/461189.jpg" alt=""/></p></li>
<li><p>lb集群的nginx配置</p>

<pre><code>[root@lb01 ~]# cat /application/nginx/conf/nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
    upstream server_pools {
        server 10.0.0.7;
        server 10.0.0.8;
        server 10.0.0.9;
    }
    server {
        listen 10.0.0.4:80;
        server_name bbs.etiantian.org;
        location / {
            proxy_pass http://server_pools;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
       access_log  logs/access_bbs.log  main;

    }
    server {
        listen 10.0.0.3:80;
        server_name www.etiantian.org;
        location / {
            proxy_pass http://server_pools;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
       access_log  logs/access_www.log  main;

    }
}
</code></pre></li>
<li><p>web服务器nginx配置</p>

<pre><code>[root@web03 ~]# cat /application/nginx/conf/nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        listen 80;
        server_name  bbs.etiantian.org;
        location / {
            root   html/bbs;
            index  index.html index.htm;
        }
    }
    server {
        listen 80;
        server_name  www.etiantian.org;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
    }
}
</code></pre></li>
<li><p>修改web服务器主页文件作为测试页面</p>

<pre><code>[root@web01 ~]# cat /application/nginx/html/bbs/index.html
bbs web01
[root@web01 ~]# cat /application/nginx/html/www/index.html
www web01
[root@web02 ~]# cat /application/nginx/html/bbs/index.html
bbs web02
[root@web02 ~]# cat /application/nginx/html/www/index.html
www web02
[root@web03 ~]# cat /application/nginx/html/bbs/index.html
bbs web03
[root@web03 ~]# cat /application/nginx/html/www/index.html
www web03
</code></pre></li>
<li><p>修改Windows hosts文件</p>

<pre><code>10.0.0.3            bbs.etiantian.org
10.0.0.4            www.etiantian.org
</code></pre></li>
<li><p>访问测试</p>

<pre><code>[root@lb01 ~]# curl -H Host:bbs.etiantian.org 10.0.0.3
bbs web02
[root@lb01 ~]# curl -H Host:bbs.etiantian.org 10.0.0.3
bbs web03
[root@lb01 ~]# curl -H Host:bbs.etiantian.org 10.0.0.3
bbs web01
[root@lb01 ~]# curl -H Host:bbs.etiantian.org 10.0.0.4
bbs web03
[root@lb01 ~]# curl -H Host:bbs.etiantian.org 10.0.0.4
bbs web01
[root@lb01 ~]# curl -H Host:bbs.etiantian.org 10.0.0.4
bbs web02
[root@lb02 ~]# curl -H Host:www.etiantian.org 10.0.0.3
www web01
[root@lb02 ~]# curl -H Host:www.etiantian.org 10.0.0.3
www web02
[root@lb02 ~]# curl -H Host:www.etiantian.org 10.0.0.3
www web03
[root@lb02 ~]# curl -H Host:www.etiantian.org 10.0.0.4
www web01
[root@lb02 ~]# curl -H Host:www.etiantian.org 10.0.0.4
www web02
[root@lb02 ~]# curl -H Host:www.etiantian.org 10.0.0.4
www web03
</code></pre></li>
</ol></li>
<li><p>组播地址冲突</p>

<p>如何解决多组Keepalived在同一个局域网中的组播地址相同导致的冲突?<br/>
vrrp_mcast_group4 224.0.0.X (默认值是18)<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/13814683.jpg" alt=""/></p></li>
<li><p>排错</p>

<ol>
<li>DNS是否正确解析---curl测试---检查hosts文件--ping测试</li>
<li>浏览器缓存---隐身无痕模式----Ctrl F5强制刷新,不载入缓存</li>
<li>修改服务配置后没有reload</li>
</ol></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三十、Nginx应用--反向代理--负载均衡]]></title>
    <link href="http://note.ptzzy.top/15051475777273.html"/>
    <updated>2017-09-12T00:32:57+08:00</updated>
    <id>http://note.ptzzy.top/15051475777273.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>集群的</p>

<ol>
<li>相同功能的服务器的集合</li>
<li>高可用性能更好--对用户请求的处理能力更强</li>
<li>安全稳定--避免单点故障</li>
</ol>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/6167401.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/92263812.jpg" alt=""/></p></li>
<li><p>集群的实现---反向代理</p>

<ol>
<li><p>反向代理</p>

<p>====指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/91531825.jpg" alt=""/></p></li>
<li><p>负载均衡<br/>
====对访问请求进行调度, 使各个web服务器一起分担压力</p>

<ol>
<li>硬件实现----F5/A10</li>
<li><p>软件实现</p>

<p>Nginx (4/7层) 反向代理+负载均衡<br/>
LVS (4层) 数据转发+负载均衡<br/>
haproxy (4/7层) 反向代理</p></li>
</ol></li>
</ol></li>
<li><p>nginx负载均衡部署<br/>
<a href="http://nginx.org/en/docs/http/load_balancing.html">http://nginx.org/en/docs/http/load_balancing.html</a><br/>
<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass</a><br/>
<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html">http://nginx.org/en/docs/http/ngx_http_upstream_module.html</a></p>

<ol>
<li><p>准备工作</p>

<p>lb01 lb02: 安装Nginx<br/>
准备3台web服务器: web01 web02 web03</p></li>
<li><p>lb01 lb02 安装部署Nginx</p></li>
<li><p>web01 web02 修改nginx.conf</p>

<pre><code>worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
    server {
        listen       80;
        server_name  bbs.etiantian.org;
        location / {
            root   html/bbs;
            index  index.html index.htm;
        }
          access_log  logs/access_bbs.log  main;
    }
    server {
        listen       80;
        server_name  www.etiantian.org;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
        access_log  logs/access_www.log  main;
    }
}
</code></pre></li>
<li><p>lb01修改nginx.conf</p>

<pre><code>[root@lb01 ~]# vim /application/nginx/conf/nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # upstream模块
    upstream server_pools {
      server 10.0.0.7:80 weight=3;
      server 10.0.0.8:80 weight=2;
    # server 10.0.0.9:80 weight=2 down;
    # server 10.0.0.9:80 weight=2 backup;
    }
    server {
        listen       80;
        server_name  bbs.etiantian.org;
        location / {
    # proxypass模块
            proxy_pass http://server_pools;
        }
    }
    ```
</code></pre></li>
</ol>

<ol>
<li><p>重载所有Linux服务器中nginx服务</p>

<pre><code>nginx -t
nginx -s reload
</code></pre></li>
<li><p>修改/etc/hosts文件</p>

<pre><code>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
172.16.1.5      lb01
172.16.1.6      lb02
172.16.1.7      web02 www.etiantian.org blog.etiantian.org bbs.etiantian.org etiantian.org
172.16.1.8      web01 www.etiantian.org blog.etiantian.org bbs.etiantian.org etiantian.org
172.16.1.9      web03
172.16.1.51     db01 db01.etiantian.org
172.16.1.31     nfs01
172.16.1.41     backup
172.16.1.61     m01
</code></pre></li>
<li><p>修改Windows的hosts文件</p>

<pre><code>10.0.0.5      status.etiantian.org etiantian.org www.etiantian.org bbs.etiantian.org blog.etiantian.org
</code></pre></li>
<li><p>负载均衡测试</p>

<pre><code>[root@lb02 nginx-1.10.3]# curl 10.0.0.5/oldboy.html
bbs web01
[root@lb02 nginx-1.10.3]# curl 10.0.0.5/oldboy.html
bbs web02
[root@lb02 nginx-1.10.3]# curl 10.0.0.5/oldboy.html
bbs web01
[root@lb02 nginx-1.10.3]# curl 10.0.0.5/oldboy.html
bbs web02
[root@lb02 nginx-1.10.3]# curl 10.0.0.5/oldboy.html
bbs web02
[root@lb02 nginx-1.10.3]# curl 10.0.0.5/oldboy.html
bbs web01
</code></pre></li>
</ol></li>
<li><p>upstream负载均衡模块ngx_http_upstream_module</p>

<ol>
<li><p>模块参数<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/61658316.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/51578229.jpg" alt=""/></p></li>
<li><p>调度算法</p>

<ol>
<li><p>rr轮询调度算法(round robin)--默认算法</p>

<p>将用户访问请求周期性轮流地平均分配给池中的性能相近的web服务器</p></li>
<li><p>wrr权重调度算法</p>

<p>将用户访问请求按权重值分配给池中的不同性能的web服务器</p></li>
<li><p>least_conn 最小连接数优先算法</p>

<p>将用户访问请求按各个服务器的实时负载压力(连接数)来分配, 优先分配给连接数最小的.</p></li>
<li><p>IP_hash算法</p>

<p>将用户访问请求按照不同的源IP计算出不同的hash值并分别对应到各个web服务器上,再将hash值相同的请求分配给同一台web服务器</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/70294491.jpg" alt=""/></p>

<p>可能导致的问题: 一个公网IP多个子网用户的情况下,访问请求会集中在一台web服务器上,导致负载不均</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/12213651.jpg" alt=""/></p>

<p>解决方案: memcached/redis 缓存服务器 (缓存用户浏览数据和会话信息)</p></li>
<li><p>补充:fair 动态调度算法</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/33408704.jpg" alt=""/></p></li>
</ol></li>
</ol></li>
<li><p>proxy反向代理模块ngx_http_proxy_module</p>

<ol>
<li><p>保留用户请求的主机名</p>

<p>核心代码: <mark>proxy_set_header Host $host;</mark><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/92469971.jpg" alt=""/></p>

<p>客户端访问（host:<a href="http://www.etiantian.org">www.etiantian.org</a> ）---&gt;代理端（不关心客户端的host信息，直接用IP访问节点）---&gt;节点收到IP地址的请求（将第一个server主机信息进行回复）</p>

<p>proxy_set_header（host:<a href="http://www.etiantian.org">www.etiantian.org</a> ）---&gt;代理端（关心客户端的host信息，利用客户端请求host访问节点）---&gt;节点收到host的请求（将相应主机信息进行响应）</p>

<p>proxy反向代理模块中的proxy_set_header能保留用户的请求报文头部信息(即保留用户请求的URL, 使负载池中IP指向设置失效)所以www.etiantian.org/oldboy.html会被保留,web服务器就能正确响应返回www.etiantian.org而不是默认第一个bbs.etiantian.org</p>

<p>说明:curl -H Host: 将自定义的请求头信息传递给服务器</p>

<pre><code>[root@lb01 conf]# curl www.etiantian.org/oldboy.html
www web02
[root@lb01 conf]# curl 10.0.0.8/oldboy.html
bbs web01
[root@lb01 conf]# curl -H Host:www.etiantian.org 10.0.0.8/oldboy.html 
www web01
</code></pre></li>
<li><p>保留用户的真实IP</p>

<p>核心代码: <mark>proxy_set_header X-Forwarded-For $remote_addr;</mark></p>

<p>负载均衡配置</p>

<pre><code>[root@lb01 ~]# cat /application/nginx/conf/nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    upstream server_pools {
    #ip_hash;
    server 10.0.0.7:80 ;
    server 10.0.0.8:80 ;
    } 
    server {
        listen       80;
        server_name  bbs.etiantian.org;
        location / {
          proxy_pass http://server_pools;
          proxy_set_header Host $host; 
          proxy_set_header X-Forwarded-For $remote_addr; 
        }
    }
    server {
        listen       80;
        server_name  www.etiantian.org ;
        location / {
          proxy_pass http://server_pools ;
          proxy_set_header Host $host;         
          proxy_set_header X-Forwarded-For $remote_addr; 
        }
    }
}
</code></pre>

<p>web服务器配置</p>

<pre><code>[root@web02 ~]# cat /application/nginx/conf/nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
    server {
        listen       80;
        server_name  bbs.etiantian.org 

;
        location / {
            root   html/bbs;
            index  index.html index.htm;
        }
  access_log  logs/access_bbs.log  main;
    }
    server {
        listen       80;
        server_name  www.etiantian.org 

;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
   access_log  logs/access_www.log   main;
    }
}
</code></pre>

<p>查看web服务器上的日志</p>

<pre><code>10.0.0.5 - - [13/Aug/2017:22:25:07 +0800] &quot;GET /oldboy.html HTTP/1.0&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36&quot; &quot;10.0.0.1&quot;
</code></pre></li>
</ol></li>
<li><p>区别cookie和session</p>

<p>都可以存放用户的访问信息, 但是存放位置和功能不同</p>

<ol>
<li><p>cookie 客户端--浏览器</p>

<p>1）变量名字和变量的内容<br/>
2）由开发人员制定<br/>
3）每个网站（域名）对应着 cookie是相同 </p></li>
<li><p>session会话服务端<br/>
存放用户登录信息 ----打包/加密----不用重新登录</p></li>
</ol></li>
<li><p>负载均衡部署实战</p>

<ol>
<li><p>反向代理的三种应用场景</p>

<p>01：根据URL中的目录地址实现代理转发<br/>
02：根据客户端的设备（user_agent）转发实践<br/>
03：根据文件扩展名实现代理转发</p></li>
<li><p>动静分离--根据用户请求的uri类型(动态/静态)分配给不同集群<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/30387209.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-13/58402715.jpg" alt=""/></p>

<ol>
<li><p>环境模拟</p>

<blockquote>
<p>web01</p>
</blockquote>

<pre><code>mkdir /application/nginx/html/www/upload/
cd /application/nginx/html/www/upload/
echo &quot;upload_info web01&quot; &gt;oldgirl.html
</code></pre>

<blockquote>
<p>web02</p>
</blockquote>

<pre><code>mkdir /application/nginx/html/www/static/
cd /application/nginx/html/www/static/
echo &quot;static_info web02&quot; &gt;oldgirl.html
</code></pre>

<blockquote>
<p>web03</p>
</blockquote>

<pre><code>cd /application/nginx/html/www/
echo &quot;default_info web03&quot; &gt;oldgirl.html
</code></pre></li>
<li><p>主配置修改</p>

<blockquote>
<p>lb01 nginx.conf</p>
</blockquote>

<pre><code>worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
upstream upload_pools {
  server 10.0.0.8:80;
}

upstream static_pools {
  server 10.0.0.7:80;
}

upstream default_pools {
  server 10.0.0.9:80;
}
  server {
    listen 80;
server_name www.etiantian.org;

    location /static/ { 
    proxy_pass http://static_pools;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $remote_addr;
}

    location /upload/ { 
    proxy_pass http://upload_pools;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $remote_addr;
}

    location / { 
    proxy_pass http://default_pools;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $remote_addr;
    }
    access_log  logs/access_www.log  main;
  }
}
</code></pre>

<blockquote>
<p>web123 nginx.conf</p>
</blockquote>

<pre><code>```
</code></pre>

<p>worker_processes  1;<br/>
events {<br/>
    worker_connections  1024;<br/>
}<br/>
http {<br/>
    include       mime.types;<br/>
    default_type  application/octet-stream;<br/>
    sendfile        on;<br/>
    keepalive_timeout  65;<br/>
    server {<br/>
        listen       80;<br/>
        server_name  bbs.etiantian.org;<br/>
        location / {<br/>
            root   html/bbs;<br/>
            index  index.html index.htm;<br/>
        }<br/>
    }<br/>
    server {<br/>
        listen       80;<br/>
        server_name  <a href="http://www.etiantian.org">www.etiantian.org</a>;<br/>
        location / {<br/>
            root   html/www;<br/>
            index  index.html index.htm;<br/>
        }<br/>
    }<br/>
}<br/>
```</p></li>
</ol>

<ol>
<li><p>所有主机: 重启nginx服务</p>

<pre><code>nginx -t
nginx -s stop
nginx
</code></pre></li>
<li><p>浏览器测试</p>

<p>浏览器分别访问<br/>
<a href="http://www.etiantian.org/oldgirl.html">http://www.etiantian.org/oldgirl.html</a><br/>
<a href="http://www.etiantian.org/static/oldgirl.html">http://www.etiantian.org/static/oldgirl.html</a><br/>
<a href="http://www.etiantian.org/upload/oldgirl.html">http://www.etiantian.org/upload/oldgirl.html</a></p></li>
</ol></li>
<li><p>基于用户使用的客户端类型($http_user_agent)分配访问请求</p>

<ol>
<li><p>环境模拟</p>

<blockquote>
<p>web01接受chrome浏览器访问请求</p>
</blockquote>

<pre><code>echo &quot;Chrome web01&quot; &gt; /application/nginx/html/www/liulanqi.html
</code></pre>

<blockquote>
<p>web02 接受IE浏览器访问请求</p>
</blockquote>

<pre><code>echo &quot;MSIE web02&quot; &gt; /application/nginx/html/www/liulanqi.html
</code></pre>

<blockquote>
<p>web03 接受其他浏览器访问请求</p>
</blockquote>

<pre><code>echo &quot;Default web03&quot; &gt; /application/nginx/html/www/liulanqi.html
</code></pre></li>
</ol></li>
<li><p>lb01主配置文件修改</p>

<pre><code>[root@lb01 conf]# cat nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
upstream upload_pools {
  server 10.0.0.8:80;
}

upstream static_pools {
  server 10.0.0.7:80;
}

upstream default_pools {
  server 10.0.0.9:80;
}

    server {
        listen 80;
        server_name www.etiantian.org;
        location / {
         if ($http_user_agent ~* &quot;MSIE&quot;)
          {
            proxy_pass http://static_pools;
          }
         if ($http_user_agent ~* &quot;Chrome&quot;)
          {
            proxy_pass http://upload_pools;
          }
            proxy_pass http://default_pools;
               }
         proxy_set_header HOST $host;
         proxy_set_header X-Forwarded-For $remote_addr;
         access_log  logs/access_www.log  main;
   }
}
</code></pre></li>
<li><p>使用不同浏览器测试</p>

<p>chrome浏览器模拟手机访问测试页面: <a href="http://www.etiantian.org/liulanqi.html">http://www.etiantian.org/liulanqi.html</a></p></li>
</ol></li>
<li><p>反向代理访问异常排错思路</p>

<ol>
<li>确认访问代理服务器网络是否正确       客户端---代理服务器是否正常   ping telnet</li>
<li>代理服务器访问节点网络链路是否正常   代理服务器---web节点         ping telnet</li>
<li>客户端直接访问web节点，确认是否节点访问有异常</li>
<li>负载均衡反向代理服务器配置有问题</li>
</ol></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[廿九、数据库迁移--NFS迁移]]></title>
    <link href="http://note.ptzzy.top/15051466954965.html"/>
    <updated>2017-09-12T00:18:15+08:00</updated>
    <id>http://note.ptzzy.top/15051466954965.html</id>
    <content type="html"><![CDATA[
<p><strong>迁移目的</strong></p>

<blockquote>
<p>将部署在web01中的数据库完整迁移到db01, 使数据库服务器和web服务器各司其职<br/>
将web01上www用户上传的文件统一存放到nfs01上</p>
</blockquote>

<p>========MySQL数据库迁移========</p>

<ol>
<li><p>db01的准备工作</p>

<ol>
<li><p>添加系统虚拟用户mysql</p>

<pre><code>useradd -s /sbin/nologin  -M mysql
</code></pre></li>
<li><p>安装MySQL</p>

<pre><code>cd /server/tools/
tar xf mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz
mv /server/tools/mysql-5.6.34-linux-glibc2.5-x86_64 /application/mysql-5.6.34
ln -s /application/mysql-5.6.34/ /application/mysql
chown -R mysql.mysql /application/mysql/data/
/application/mysql/scripts/mysql_install_db --basedir=/application/mysql --datadir=/application/mysql/data --user=mysql
cp /application/mysql/support-files/mysql.server  /etc/init.d/mysqld
chmod +x /etc/init.d/mysqld
chkconfig --add mysqld
chkconfig mysqld on
sed -i &#39;s#/usr/local/mysql#/application/mysql#g&#39; /application/mysql/bin/mysqld_safe /etc/init.d/mysqld
\cp /application/mysql/support-files/my-default.cnf /etc/my.cnf
/etc/init.d/mysqld start
echo &#39;export PATH=/application/mysql/bin:$PATH&#39; &gt;&gt;/etc/profile
source /etc/profile
which mysql
/application/mysql/bin/mysqladmin -u root password &#39;oldboy123&#39;
mysql -uroot -poldboy123
quit
</code></pre></li>
</ol></li>
<li><p>web01上进行数据库备份并推送到db01</p>

<ol>
<li><p>mysqldump命令</p>

<pre><code>Dumping structure and contents of MySQL databases and tables.
Usage: mysqldump [OPTIONS] database [tables]
OR     mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...]
OR     mysqldump [OPTIONS] --all-databases [OPTIONS]
-A --all-databases 备份所有数据库
</code></pre>

<pre><code>mysqldump -uroot -p -A|gzip &gt;/tmp/alldb-bak.gz #不使用明文密码的安全操作
ll /tmp/alldb-bak.gz
</code></pre></li>
<li><p>scp推送到db01</p>

<pre><code>scp /tmp/alldb-bak.gz db01:/tmp        #需要hosts文件中有对应的ip解析
</code></pre></li>
</ol></li>
<li><p>db01上解压并使用root账号导入备份</p>

<pre><code>gzip -d /tmp/alldb-bak.gz
mysql -uroot -p &lt;/tmp/alldb-bak         #不使用明文密码的安全操作
mysql -uroot -poldboy123                 #使用管理账号登录
flush privileges;                 #刷新账号信息使之生效
quit
mysql -uwordpress -p                     # WordPress测试账号登录是否成功(迁移成功)
</code></pre></li>
<li><p>修改web01配合文件</p>

<pre><code>grep &#39;localhost&#39; /application/nginx/html/blog/wp-config.php
define(&#39;DB_HOST&#39;, &#39;localhost&#39;);
sed -i &#39;s#localhost#172.16.1.51#g&#39; /application/nginx/html/blog/wp-config.php /application/nginx/html/blog/test_mysql.php
grep &#39;172&#39; /application/nginx/html/blog/wp-config.php
define(&#39;DB_HOST&#39;, &#39;172.16.1.51&#39;);
</code></pre></li>
<li><p>停掉web01数据库并设置开机不启动</p>

<pre><code>/etc/init.d/mysqld stop
chkconfig  mysqld off
</code></pre></li>
<li><p>修改web01的php与db01的mysql连通性测试文件</p>

<pre><code>vim /application/nginx/html/blog/test_mysql.php
</code></pre>

<pre><code>&lt;?php
     //$link_id=mysql_connect(&#39;主机名&#39;,&#39;用户&#39;,&#39;密码&#39;);
     //mysql -u用户 -p密码 -h 主机
     $link_id=mysql_connect(&#39;172.16.1.51&#39;,&#39;wordpress&#39;,&#39;123456&#39;) or mysql_error();
     if($link_id){
         echo &quot;mysql successful by oldboy !\n&quot;;
      }else{
         echo mysql_error();
       }
?&gt;
</code></pre></li>
<li><p>排错</p>

<ol>
<li><p>test_mysql.php测试时账号认证错误</p>

<blockquote>
<p>db01中缺少了少了同网段的认证信息</p>
</blockquote>

<pre><code>mysql -uroot -poldboy123
grant all on wordpress.* to &#39;wordpress&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;
grant all on wordpress.* to &#39;wordpress&#39;@&#39;172.16.1.0/255.255.255.0&#39; identified by &#39;123456&#39;;
flush privileges;
</code></pre></li>
</ol>

<p>========NFS迁移========</p>

<blockquote>
<p>如何找到用户上传的文件路径?</p>

<ol>
<li><p>复制blog中的图片地址</p>

<p><a href="http://blog.etiantian.org/wp-content/uploads/2017/08/nginx-320x320-300x300.jpg">http://blog.etiantian.org/wp-content/uploads/2017/08/nginx-320x320-300x300.jpg</a></p></li>
<li><p>找到blog目录下最新的文件</p>

<pre><code>find /application/nginx/html/blog/ -mmin -10
</code></pre></li>
</ol>
</blockquote></li>
<li><p>在nfs01上确认nfs服务是否启动</p>

<pre><code>/etc/init.d/nfs status
/etc/init.d/rpcbind stop
/etc/init.d/nfs stop
</code></pre>

<blockquote>
<p>启动顺序</p>
</blockquote>

<pre><code>/etc/init.d/rpcbind start
/etc/init.d/nfs start
/etc/init.d/nfs status
</code></pre></li>
<li><p>nfs01准备共享目录</p>

<pre><code>mkdir /blog-data
chown nfsnobody. nfsnobody /blog-data/
echo &#39;#blog-data 20170811&#39; &gt;&gt;/etc/exports
echo &#39;/blog-data/ 172.16.1.0/24(rw,sync,all_squash)&#39; &gt;&gt;/etc/exports
/etc/init.d/nfs reload             # == exportsfs -rv
showmount -e nfs01
</code></pre></li>
<li><p>web01挂载前的准备(需要关闭网站,不让用户创建新博客)</p>

<pre><code>yum install -y rpcbind nfs-utils
showmount -e nfs01
mkdir /tmp/blog-tmp/
mv /application/nginx/html/blog/wp-content/uploads/* /tmp/blog-tmp/
</code></pre></li>
<li><p>web01挂载共享目录并在nfs01上测试结果</p>

<pre><code>mount -t nfs 172.16.1.31:/blog-data /application/nginx/html/blog/wp-content/uploads/
echo &#39;mount -t nfs 172.16.1.31:/blog-data /application/nginx/html/blog/wp-content/uploads/&#39; &gt;&gt;/etc/profile #设置开机挂载
touch /application/nginx/html/blog/wp-content/uploads/test.txt
</code></pre></li>
<li><p>将用户上传的••文件转移回来</p>

<pre><code>mv /tmp/blog-tmp/* /application/nginx/html/blog/wp-content/uploads/
</code></pre>

<blockquote>
<p>注意: 这一步操作会出现告警信息, 因为挂载后www用户会被压缩, 文件属主会有变化<br/>
注意: web01和nfs01时间上要保持一致同步, 否则按时间查找用户上传的文件时会有坑</p>
</blockquote></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[廿八、MySQL基本操作]]></title>
    <link href="http://note.ptzzy.top/15051459212797.html"/>
    <updated>2017-09-12T00:05:21+08:00</updated>
    <id>http://note.ptzzy.top/15051459212797.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>shell内操作</p>

<p><a href="http://www.cnblogs.com/kerrycode/p/4606400.html">http://www.cnblogs.com/kerrycode/p/4606400.html</a></p>

<pre><code>[root@db01 ~]# mysql -uroot -p123456 
</code></pre>

<blockquote>
<p>-h远程登录: -h10.0.0.51</p>
</blockquote>

<pre><code>mysql&gt; quit
</code></pre>

<ol>
<li><p>备份db01--&gt;db02</p>

<pre><code>[root@db01 ~]# mysqldump -uroot -p -A|gzip &gt;/tmp/alldb-bak.gz
[root@db01 ~]# scp /tmp/alldb-bak.gz db02:/tmp
</code></pre>

<pre><code>[root@db02 ~]# gzip -d /tmp/alldb-bak.gz
[root@db02 ~]# mysql -uroot -p &lt;/tmp/alldb-bak
</code></pre></li>
<li><p>查看数据库操作历史</p>

<pre><code>[root@db01 ~]# cat ~/.mysql_history
</code></pre></li>
</ol></li>
<li><p>库操作</p>

<blockquote>
<p>#查看数据库列表</p>

<pre><code>mysql&gt; show databases;
</code></pre>
</blockquote>

<blockquote>
<p>#创建数据库</p>

<pre><code>mysql&gt; create database wordpress;
</code></pre>
</blockquote>

<blockquote>
<p>#删除数据库</p>

<pre><code>mysql&gt; drop database wordpress;
</code></pre>
</blockquote>

<blockquote>
<p>#查看当前所在数据库，类似于pwd命令的功能</p>

<pre><code>mysql&gt; select database();
</code></pre>
</blockquote>

<blockquote>
<p>#使用一个数据库，相当于cd进入一个数据库</p>

<pre><code>mysql&gt; use mysql;
</code></pre>
</blockquote></li>
<li><p>用户操作</p>

<blockquote>
<p># 为MySQL用户指定新密码</p>

<pre><code>mysqladmin -u wordpress -p password 123456
</code></pre>
</blockquote>

<blockquote>
<p>#查看所有数据库的用户信息</p>

<pre><code>mysql&gt; select user,host from mysql.user;
</code></pre>

<p>注意: 每个库的用户名和密码都存放在user表中</p>
</blockquote>

<blockquote>
<p>#授权 所有权限 在WordPress库的所有表 给WordPress用户 密码设置为oldboy123 用户信息</p>

<pre><code>mysql&gt; grant all on wordpress.* to &#39;wordpress&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;
mysql&gt; grant all on wordpress.* to &#39;wordpress&#39;@&#39;172.16.1.0/255.255.255.0&#39; identified by &#39;123456&#39;;
mysql&gt; flush privileges;
</code></pre>

<p>注意: 实现本地登录数据库, 必须授权给localhost, 否则无法登录; 远程登录必须控制在内网范围内.<br/>
注意: 新版本中不再支持&#39;172.16.1.0/24&#39;和&#39;172.16.1.%&#39;两种写法.<br/>
注意: 修改用户授权信息后, 要更新权限.</p>
</blockquote>

<blockquote>
<p>#删除用户信息</p>

<pre><code>mysql&gt; drop user wordpress@&#39;172.16.1.8&#39;;
</code></pre>
</blockquote>

<blockquote>
<p>#查看当前登录数据库的用户</p>

<pre><code>mysql&gt; select user();
</code></pre>
</blockquote>

<blockquote>
<p># 查看可以登录mysql数据库的目录，以及都可以从哪里进行管理mysql数据库</p>

<pre><code>mysql&gt; select user,host from mysql.user;
</code></pre>
</blockquote></li>
<li><p>表操作</p>

<blockquote>
<p>#查看数据表列表</p>

<pre><code>mysql&gt; show tables;
</code></pre>
</blockquote></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[附录: 502和504错误]]></title>
    <link href="http://note.ptzzy.top/15051451335516.html"/>
    <updated>2017-09-11T23:52:13+08:00</updated>
    <id>http://note.ptzzy.top/15051451335516.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">一、错误提示说明：</h3>

<p>Nginx 502 Bad Gateway的含义是请求的PHP-CGI已经执行，但是由于某种原因（一般是读取资源的问题）没有执行完毕而导致PHP-CGI进程终止。</p>

<p>Nginx 504 Gateway Time-out的含义是所请求的网关没有请求到，简单来说就是没有请求到可以执行的PHP-CGI。</p>

<h3 id="toc_1">二、错误提示原因分析：</h3>

<p>解决这两个问题其实是需要综合思考的，一般来说Nginx 502 Bad Gateway和php-fpm.conf的设置有关，<br/>
而Nginx 504 Gateway Time-out则是与nginx.conf的设置有关。</p>

<p>php-fpm.conf有两个至关重要的参数，一个是”max_children”,另一个是”request_terminate_timeout” ，但是这个值不是通用的，而是需要自己计算的。</p>

<p>计算的方式如下：<br/>
如果你的服务器性能足够好，且宽带资源足够充足，PHP脚本没有系循环或BUG的话你可以直接将”request_terminate_timeout”设置成0s。0s的含义是让PHP-CGI一直执行下去而没有时间限制。而如果你做不到这一点，也就是说你的PHP-CGI可能出现某个BUG，或者你的宽带不够充足或者其他的原因导致你的PHP-CGI能够假死那么就建议你给”request_terminate_timeout”赋一个值，这个值可以根据你服务器的性能进行设定。一般来说性能越好你可以设置越高，20分钟-30分钟都可以。由于我的服务器PHP脚本需要长时间运行，有的可能会超过10分钟因此我设置了900秒，这样不会导致PHP-CGI死掉而出现502 Bad gateway这个错误。</p>

<p>而”max_children”这个值又是怎么计算出来的呢？这个值原则上是越大越好，php-cgi的进程多了就会处理的很快，排队的请求就会很少。设置”max_children”也需要根据服务器的性能进行设定，一般来说一台服务器正常情况下每一个php-cgi所耗费的内存在20M左右，因此我的”max_children”我设置成40个，20M*40=800M也就是说在峰值的时候所有PHP-CGI所耗内存在800M以内，低于我的有效内存1Gb。而如果我的”max_children”设置的较小，比如5-10个，那么php-cgi就会“很累”，处理速度也很慢，等待的时间也较长。如果长时间没有得到处理的请求就会出现504 Gateway Time-out这个错误，而正在处理的很累的那几个php-cgi如果遇到了问题就会出现502 Bad gateway这个错误。</p>

<h3 id="toc_2">三、临时解决办法：</h3>

<p>综上所述，Nginx提示502和504错误的临时解决办法是：</p>

<h4 id="toc_3">1、调整php-fpm.conf的相关设置：</h4>

<pre><code>32
30s
</code></pre>

<h4 id="toc_4">2、调整nginx.conf的相关设置：</h4>

<pre><code>fastcgi_connect_timeout 600;
fastcgi_send_timeout 600;
fastcgi_read_timeout 600;
fastcgi_buffer_size 256k;
fastcgi_buffers 16 256k;
fastcgi_busy_buffers_size 512k;
fastcgi_temp_file_write_size 512k;
</code></pre>

<h3 id="toc_5">四、终级解决方案：</h3>

<p>标题3中所示的解决方案只能临时解决问题，而如果网站的访问量确实非常非常大，而Nginx+FastCGI只能对处理瞬间或短时间内的高并发有很好的效果，所以目前唯一的终极解决方案是：定时平滑重启php-cgi。</p>

<p>具体配置如下：</p>

<h4 id="toc_6">1、写一个非常简单的脚本：</h4>

<pre><code>vi /home/www/scripts/php-fpm.sh 
</code></pre>

<p>内容如下：</p>

<pre><code>#!/bin/bash
# This script run at */1
/usr/local/php/sbin/php-fpm reload
</code></pre>

<h4 id="toc_7">2、将脚本添加至计划任务：</h4>

<pre><code>crontab -e
</code></pre>

<p>内容如下：</p>

<pre><code>*/1 * * * * /home/www/scripts/php-fpm.sh 
</code></pre>

<blockquote>
<p>注：为了省事起见，也可以不写脚本，直接在crontab里写入php-fpm的平滑重启命令。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[廿七、单台服务器LNMP搭建]]></title>
    <link href="http://note.ptzzy.top/15051418147758.html"/>
    <updated>2017-09-11T22:56:54+08:00</updated>
    <id>http://note.ptzzy.top/15051418147758.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>LNMP架构与部署流程图<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/54209317.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/79629399.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/50069384.jpg" alt=""/></p></li>
<li><p>Linux部署</p>

<ol>
<li><p>网络配置</p>

<blockquote>
<p>Linux网卡配置: ---------- vm网络编辑器的配置<br/>
eth0:10.0.0.X ----------- NAT<br/>
eth1:172.16.1.X  -------- 虚拟LAN区段: 172.16.1.0/24<br/>
网关设置:NAT 10.0.0.254<br/>
DNS配置:NAT 223.5.5.5 223.6.6.6</p>
</blockquote></li>
<li><p>确认系统环境</p>

<pre><code>[root@web01 ~]# cat /etc/centos-release
CentOS release 6.9 (Final)
[root@web01 ~]# uname -a
Linux web01 2.6.32-696.el6.x86_64 #1 SMP Tue Mar 21 19:29:05 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
</code></pre></li>
<li><p>虚拟机优化</p>

<blockquote>
<p>iptables防火墙关闭<br/>
selinux关闭<br/>
/tmp目录权限 1777<br/>
epel源下载</p>

<pre><code>wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo
</code></pre>
</blockquote></li>
</ol></li>
<li><p>Nginx部署</p>

<ol>
<li><p>统一安装包路径, 下载解压nginx软件包</p>

<pre><code>mkdir -p /server/tools/
cd /server/tools/
wget http://nginx.org/download/nginx-1.10.3.tar.gz
</code></pre></li>
<li><p>创建nginx虚拟用户用户---www</p>

<pre><code>useradd -s /sbin/nologin -M www
</code></pre></li>
<li><p>依赖包安装：pcre-devel openssl-devel</p>

<pre><code>yum install pcre-devel openssl-devel gcc -y
rpm -qa pcre* openssl* gcc
</code></pre></li>
<li><p>编译安装nginx软件服务</p>

<pre><code>tar xf nginx-1.10.3.tar.gz
cd nginx-1.10.3/
./configure --prefix=/application/nginx-1.10.3 --user=www --group=www --with-http_stub_status_module --with-http_ssl_module
make &amp;&amp; make install
</code></pre></li>
<li><p>创建服务程序的软链接</p>

<pre><code>ln -s /application/nginx-1.10.3 /application/nginx
ln -s /application/nginx/sbin/nginx /usr/local/sbin/
</code></pre></li>
<li><p>配置文件进行编辑修改</p>

<blockquote>
<pre><code>cd /application/nginx/conf/
mkdir /application/nginx/conf/extra
egrep -v &#39;#|^$&#39; nginx.conf.default
egrep -v &#39;#|^$&#39; nginx.conf.default &gt;nginx.conf
for i in www bbs blog status;do touch extra/${i}.conf;done
tree extra/
</code></pre>

<p>extra/<a href="http://www.conf">www.conf</a></p>

<pre><code>cat &gt;&gt; extra/www.conf&lt;&lt;EOF
server {
    listen       80;
    server_name  www.etiantian.org;
    location / {
        root   html/www;
        index  index.html index.htm;
    }
}
EOF
</code></pre>

<p>extra/bbs.conf</p>

<pre><code>cat &gt;&gt; extra/bbs.conf&lt;&lt;EOF
server {
    listen       80;
    server_name  bbs.etiantian.org;
    location / {
        root   html/blog;
        index  index.html index.htm;
    }
}
EOF
</code></pre>

<p>extra/blog.conf</p>

<pre><code>cat &gt;&gt; extra/blog.conf&lt;&lt;EOF
server {
    listen       80;
    server_name  blog.etiantian.org;
    location / {
        root   html/bbs;
        index  index.html index.htm;
    }
}
EOF
</code></pre>

<p>extra/status.conf</p>

<pre><code>cat &gt;&gt; extra/status.conf&lt;&lt;EOF
server{
    listen  80;
    server_name  status.etiantian.org;
    location / {
      stub_status on;
      access_log   off;
    }
  }
EOF
</code></pre>

<p>extra/nginx.conf</p>

<pre><code>cat&gt;nginx.conf&lt;&lt;EOF
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;
    access_log  logs/access.log  main;
    include extra/www.conf;
    include extra/bbs.conf;
    include extra/blog.conf;
    include extra/status.conf;
}
EOF
</code></pre>

<pre><code>cd /application/nginx/html/
mkdir /application/nginx/html/{www,bbs,blog}
echo &#39;www web01&#39; &gt;www/index.html
echo &#39;bbs web01&#39; &gt;bbs/index.html
echo &#39;blog web01&#39; &gt;blog/index.html
</code></pre>
</blockquote></li>
<li><p>测试配置文件语法，启动nginx服务并检查</p>

<pre><code>nginx -t
nginx
lsof -i:80
</code></pre></li>
<li><p>修改Windows的hosts并在浏览器中测试</p>

<blockquote>
<p>C:\Windows\System32\drivers\etc\hosts<br/>
使用管理员权限编辑, 加入一行新内容:</p>
</blockquote>

<pre><code>10.0.0.8 www.etiantian.org bbs.etiantian.org blog.etiantian.org status.etiantian.org etiantian.org
</code></pre></li>
</ol></li>
<li><p>MySQL部署</p>

<ol>
<li><p>添加系统虚拟用户mysql</p>

<pre><code>groupadd -g 555 mysql
useradd -s /sbin/nologin -u 555 -g 555 -M mysql
</code></pre></li>
<li><p>下载解压mysql二进制软件包</p>

<pre><code>cd /server/tools/
tar xf mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz
</code></pre></li>
<li><p>将mysql解压后的目录转移(重命名)并创建软连接</p>

<pre><code>\cp -r /server/tools/mysql-5.6.34-linux-glibc2.5-x86_64 /application/mysql-5.6.34
ln -s /application/mysql-5.6.34/ /application/mysql
</code></pre></li>
<li><p>让mysql用户管理 /application/mysql/</p>

<pre><code>chown -R mysql.mysql /application/mysql/data/
</code></pre></li>
<li><p>初始化数据库</p>

<pre><code>/application/mysql-5.6.34/scripts/mysql_install_db --basedir=/application/mysql-5.6.34/ --datadir=/application/mysql-5.6.34/data --user=mysql
# 说明信息: 初始化成功，会看到输出信息中有两个OK
# mysql启动脚本 默认放在support-files/mysql.server
</code></pre></li>
<li><p>复制默认的配置文件</p>

<pre><code>\cp /application/mysql/support-files/my-default.cnf /etc/my.cnf
</code></pre></li>
<li><p>修改mysqld 和 mysqld_safe两个脚本中的相关路径<mark>(注意先复制再修改,顺序不要错)</mark></p>

<pre><code>sed -i &#39;s#/usr/local/mysql#/application/mysql#g&#39; /application/mysql/bin/mysqld_safe /etc/init.d/mysqld
</code></pre></li>
<li><p>复制启动脚本到/etc/init.d/, 授与x权限, 并设置开机自启动</p>

<pre><code>cp /application/mysql/support-files/mysql.server  /etc/init.d/mysqld
chmod +x /etc/init.d/mysqld
chkconfig --add mysqld
chkconfig mysqld on
</code></pre></li>
<li><p>启动MySQL</p>

<pre><code>/etc/init.d/mysqld start   #启动后提示 Starting MySQL....... SUCCESS!
lsof -i:3306                #MySQL使用的端口3306
</code></pre></li>
<li><p>扩展知识：将数据库命令集目录追加到PATH中</p>

<pre><code>ln -s /application/mysql/bin/* /usr/local/bin/
which mysql
</code></pre></li>
<li><p>给MySQL添加管理员并设置密码</p>

<pre><code>/application/mysql/bin/mysqladmin -u root password &#39;oldboy123&#39;
</code></pre></li>
<li><p>测试数据库能否使用, 进入和退出</p>

<pre><code>mysql -uroot -poldboy123     #使用用户名和密码安全进入数据库
quit #退出数据库
</code></pre></li>
</ol></li>
<li><p>PHP部署</p>

<ol>
<li><p>解压PHP软件</p>

<pre><code>cd /server/tools/
tar xf php-5.5.32.tar.gz
</code></pre></li>
<li><p>准备两个文件和依赖包</p>

<pre><code>## ln -s /application/mysql/lib/libmysqlclient.so.18  /usr/lib64/  #如果未安装MySQL,可省略. 此处有隐患, 如果以后删除mysql会导致软链接失效, 建议使用以下命令
cp /application/mysql/lib/libmysqlclient.so.18.1.0 /usr/lib64/libmysqlclient.so.18 
</code></pre>

<pre><code>touch /server/tools/php-5.5.32/ext/phar/phar.phar
yum install zlib-devel libxml2-devel libjpeg-devel libjpeg-turbo-devel freetype-devel libpng-devel gd-devel libcurl-devel libxslt-devel libmcrypt-devel mhash mcrypt -y
</code></pre></li>
<li><p>安装依赖包libiconv-devel</p>

<pre><code>tar xf libiconv-1.14.tar.gz
cd libiconv-1.14
./configure --prefix=/application/libiconv

make &amp;&amp; make install
</code></pre></li>
<li><p>PHP编译安装</p>

<blockquote>
<p>#如果未安装MySQL,要修改为--with-mysql==mysqlnd --with-pdo-mysql=mysqlnd, 建议这两个编译参数直接指定mysqlnd, php就会使用</p>
</blockquote>

<pre><code>cd /server/tools/php-5.5.32
./configure \
--prefix=/application/php-5.5.32 \
--with-mysql=/application/mysql/ \    
--with-pdo-mysql=/application/mysql/ \ 
--with-freetype-dir \
--with-jpeg-dir \
--with-png-dir \
--with-zlib \
--with-libxml-dir=/usr \
--enable-xml \
--disable-rpath \
--enable-bcmath \
--enable-shmop \
--enable-sysvsem \
--enable-inline-optimization \
--with-curl \
--enable-mbregex \
--enable-fpm \
--enable-mbstring \
--with-mcrypt \
--with-gd \
--enable-gd-native-ttf \
--with-openssl \
--with-mhash \
--enable-pcntl \
--enable-sockets \
--with-xmlrpc \
--enable-soap \
--enable-short-tags \
--enable-static \
--with-xsl \
--with-fpm-user=www \
--with-fpm-group=www \
--enable-ftp \
--enable-opcache=no

make &amp;&amp; make install
</code></pre></li>
<li><p>创建PHP软件目录的软链接</p>

<pre><code>ln -s /application/php-5.5.32/ /application/php
</code></pre></li>
<li><p>配置php解析文件  配置php-fpm配置文件</p>

<pre><code>cp /server/tools/php-5.5.32/php.ini-production /application/php/lib/php.ini
cp /application/php/etc/php-fpm.conf.default /application/php/etc/php-fpm.conf
</code></pre>

<blockquote>
<p>#扩展: php.ini-production 与 php.ini-development 两个文件的区别和关系<br/>
#扩展：文件比较命令 diff zdiff vimdiff windows上的文件比较</p>
</blockquote></li>
<li><p>启动php-fpm程序</p>

<pre><code>/application/php/sbin/php-fpm
</code></pre></li>
<li><p>确认php 9000端口是否正确启动</p>

<pre><code>lsof -i:9000
ps -ef|grep php-fpm
</code></pre></li>
<li><p>创建PHP测试页面</p>

<pre><code>cd /application/nginx/html/blog/
mv index.html index.html.bak
echo &#39;&lt;?php phpinfo(); ?&gt;&#39; &gt;/application/nginx/html/blog/test_info.php
</code></pre></li>
</ol></li>
<li><p>实现nginx与PHP配合</p>

<ol>
<li><p>修改blog配置文件</p>

<pre><code>vim /application/nginx/conf/extra/blog.conf
    server {
        listen       80;
        server_name  blog.etiantian.org;
        root   html/blog;
        location / {
#index.php不加或者不放在第一个, 都会导致主页定向到index.html
            index index.php index.html index.htm;
        }

        location ~* .*\.(php|php5)?$ {
            fastcgi_pass  127.0.0.1:9000;
            fastcgi_index index.php;
            include /application/nginx/conf/fastcgi.conf;
        }

}
</code></pre>

<blockquote>
<p>说明：利用nginx的location区块实现动态请求与静态请求的分别处理</p>
</blockquote></li>
<li><p>站点测试</p>

<pre><code>curl  http://blog.etiantian.org/index.html       # 静态请求站点文件信息测试
curl  http://blog.etiantian.org/test_info.php    # 动态请求站点文件信息测试
</code></pre>

<blockquote>
<p>说明：当php服务停止时，9000端口信息消失，即停止PHP错误报502错误<br/>
linux系统测试完毕后，建议利用浏览器进行最终测试，测试效果更明显些</p>
</blockquote>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/63563084.jpg" alt=""/></p></li>
</ol></li>
<li><p>实现php与MySQL连通</p>

<ol>
<li><p>创建WordPress数据库</p>

<pre><code>mysql -uroot -poldboy123
show databases;              #查看当前数据库信息
create database wordpress;
</code></pre></li>
<li><p>添加WordPress用户并授权管理</p>

<pre><code>WordPress库
grant all on wordpress.* to &#39;wordpress&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;
grant all on wordpress.* to &#39;wordpress&#39;@&#39;172.16.1.0/255.255.255.0&#39; identified by &#39;123456&#39;;
flush privileges;
</code></pre>

<blockquote>
<p>注意: 每次修改用户授权, 都要刷新权限配置</p>
</blockquote></li>
<li><p>数据库WordPress登录测试</p>

<pre><code>mysql -uwordpress -p123456
</code></pre></li>
<li><p>编辑php与mysql连通性测试文件</p>

<pre><code>vim /application/nginx/html/blog/test_mysql.php
</code></pre>

<pre><code>&lt;?php
     //$link_id=mysql_connect(&#39;主机名&#39;,&#39;用户&#39;,&#39;密码&#39;);
     $link_id=mysql_connect(&#39;localhost&#39;,&#39;wordpress&#39;,&#39;123456&#39;) or mysql_error();
     if($link_id){
         echo &quot;Connect mysql success !\n&quot;;
      }else{
         echo mysql_error();
       }
?&gt;
</code></pre></li>
</ol></li>
<li><p>WordPress部署</p>

<ol>
<li><p>下载部署wordpress博客程序</p>

<pre><code>cd /server/tools/
wget https://cn.wordpress.org/wordpress-4.7.3-zh_CN.tar.gz
tar xf wordpress-4.7.3-zh_CN.tar.gz
\mv wordpress/* /application/nginx/html/blog/    # 强制覆盖index.html重名文件
</code></pre></li>
<li><p>文件目录权限设置<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/1583708.jpg" alt=""/></p>

<pre><code>chown -R www.www /application/nginx/html/blog/
chown -R www.www /application/nginx/html/blog/wp-content/uploads/ #用户上传数据目录属主修改为www
</code></pre>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/81176698.jpg" alt=""/></p>

<blockquote>
<p>说明: 编辑wp-config.php文件可以修改wordpress上的数据库连接参数信息</p>
</blockquote></li>
<li><p>用浏览器进行wordpress部署<br/>
<a href="http://blog.etiantian.org/wp-admin/setup-config.php">http://blog.etiantian.org/wp-admin/setup-config.php</a><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/81433116.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/55472707.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/64668274.jpg" alt=""/></p></li>
</ol></li>
<li><p>补充知识</p>

<ol>
<li><p>502和504错误</p>

<p><a href="15051451335516.html">附录: 502和504错误</a></p></li>
<li><p>排错--数据库连接问题</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-12/55569117.jpg" alt=""/></p>

<blockquote>
<p>检查网络连接<br/>
检查数据库服务<br/>
检查数据库授权</p>
</blockquote></li>
<li><p>排错mysql---启动脚本没有修改成功(可能是因为复制和修改这两个操作顺序错了)</p>

<pre><code>[root@oldboy38 ~]# /etc/init.d/mysqld start
/etc/init.d/mysqld: line 256: my_print_defaults: command not found
/etc/init.d/mysqld: line 276: cd: /application/mysql: No such file or directory
Starting MySQL ERROR! Couldn&#39;t find MySQL server (/application/mysql/bin/mysqld_safe)
</code></pre></li>
<li><p>排错: 博客发布后的链接会错误定位到blog/index.php<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-12/19982.jpg" alt=""/></p>

<blockquote>
<p>blog目录下先有了一个测试的index.php<br/>
转移解压后的wordpress内容的时候, 因为两个index.php重名了, 没有被替换掉<br/>
解决:</p>

<pre><code>\mv /server/tools/wordpress/index.php /application/nginx/html/blog/
</code></pre>
</blockquote></li>
<li><p>在数据库中查看博客中的内容</p>

<pre><code># mysql -uwordpress -p123456
mysql&gt; use wordpress;
mysql&gt; show tables;
select * from wp_posts\G           # \G 竖列显示,不接&#39;;&#39;
</code></pre></li>
<li><p>限制用户上传的文件大小</p>

<blockquote>
<p>注意: lb集群和web集群的nginx.conf都要加入以下代码才能有效</p>

<pre><code>http {
client_max_body_size 10m;
...
}
</code></pre>
</blockquote></li>
<li><p>/application/php-5.5.32/lib/php.ini</p>

<blockquote>
<p>file_uploads = On ;打开文件上传选项<br/>
upload_max_filesize = 500M ;上传文件上限<br/>
如果要上传比较大的文件，仅仅以上两条还不够，必须把服务器缓存上限调大，把脚本最大执行时间变长<br/>
post_max_size = 500M ;post上限<br/>
max_execution_time = 1800 ; Maximum execution time of each script, in seconds脚本最大执行时间<br/>
max_input_time = 1800 ; Maximum amount of time each script may spend parsing request data<br/>
memory_limit = 128M ; Maximum amount of memory a script may consume (128MB)内存上限</p>
</blockquote></li>
</ol></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[廿六、Nginx应用--Web服务]]></title>
    <link href="http://note.ptzzy.top/15051387894730.html"/>
    <updated>2017-09-11T22:06:29+08:00</updated>
    <id>http://note.ptzzy.top/15051387894730.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>nginx多虚拟主机--server{}标签</p>

<blockquote>
<p>在Web服务里独立的网站站点, 对应的是独立的域名或IP或端口</p>
</blockquote>

<ol>
<li><p>测试页面请求响应</p>

<ol>
<li><p>推荐用Linux的curl命令测试</p>

<blockquote>
<p>重启服务后立即生效, 比较准确,不受浏览器缓存的干扰</p>
</blockquote></li>
<li><p>用chrome浏览器查看修改</p>

<blockquote>
<p>需要注意浏览器缓存的干扰导致测试不准确,最好用&quot;隐身窗口&quot;,不进行页面缓存<br/>
<mark>说明：nginx配置文件修改之后，需要重启nginx服务；nginx站点目录内容变更，无需重启nginx服务</mark></p>
</blockquote></li>
</ol></li>
<li><p>基于域名的多虚拟主机配置--多个server{}标签</p>

<ol>
<li><p>环境准备</p>

<blockquote>
<p>模拟环境: <a href="http://www.etiantian.org">www.etiantian.org</a> bbs.etiantian.org blog.etiantian.org</p>
</blockquote>

<pre><code>[root@web01 ~]# mkdir /application/nginx/html/{www,bbs,blog}
[root@web01 ~]# ls /application/nginx/html/
50x.html  bbs  blog  index.html  index.html.bak  pic1.jpg  www
[root@web01 ~]# cd /application/nginx/html/
[root@web01 html]# for name in www bbs blog ; do echo $name `hostname` &gt;/application/nginx/html/$name/index.html;done
[root@web01 html]# for name in www bbs blog ; do cat /application/nginx/html/$name/index.html;done
www web01
bbs web01
blog web01
</code></pre></li>
<li><p>修改配置文件</p>

<pre><code>[root@web01 html]# cd /application/nginx/conf/
[root@web01 conf]# cp nginx.conf{,.ori.www.only}
[root@web01 conf]# vim nginx.conf
:set nu
:10,17co17
:10,17co25
</code></pre>

<blockquote>
<p>修改虚拟主机名, 修改虚拟主机各自的站点目录</p>
</blockquote>

<pre><code>server {
    listen       80;
    server_name  www.etiantian.org;
    location / {
        root   html/www;
        index  index.html index.htm;
    }
}
server {
    listen       80;
    server_name  bbs.etiantian.org;
    location / {
        root   html/blog;
        index  index.html index.htm;
    }
}
server {
    listen       80;
    server_name  blog.etiantian.org;
    location / {
        root   html/bbs;
        index  index.html index.htm;
    }
}
</code></pre></li>
<li><p>配置文件语法检查与重载</p>

<pre><code>[root@web01 conf]# nginx -t
nginx: the configuration file /application/nginx-1.10.3/conf/nginx.conf syntax is ok
nginx: configuration file /application/nginx-1.10.3/conf/nginx.conf test is successful
[root@web01 conf]# nginx -s reload
</code></pre></li>
<li><p>修改Windows hosts文件</p></li>
</ol>

<pre><code>C:\Windows\System32\drivers\etc\hosts
10.0.0.8   www.etiantian.org bbs.etiantian.org blog.etiantian.org
</code></pre></li>
<li><p>基于端口的多虚拟主机配置</p>

<blockquote>
<p>一般用于只想给内部用户访问, 不对外公开(即:不使用默认80端口)</p>
</blockquote>

<ol>
<li><p>修改配置文件</p>

<pre><code>[root@web01 conf]# cp nginx.conf{,.multi-hosts}
[root@web01 conf]# vim nginx.conf
</code></pre>

<blockquote>
<p>修改www端口</p>
</blockquote>

<pre><code>    server {
        listen       8080;
        server_name  www.etiantian.org;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
}
</code></pre></li>
<li><p>语法检查并重载配置</p>

<pre><code>[root@web01 conf]# nginx -t
nginx: the configuration file /application/nginx-1.10.3/conf/nginx.conf syntax is ok
nginx: configuration file /application/nginx-1.10.3/conf/nginx.conf test is successful
[root@web01 conf]# nginx -s reload
[root@web01 conf]# ss -lntup|grep nginx
tcp    LISTEN     0      511                    *:8080                  *:*      users:((&quot;nginx&quot;,1440,10),(&quot;nginx&quot;,6059,10))
tcp    LISTEN     0      511                    *:80                    *:*      users:((&quot;nginx&quot;,1440,6),(&quot;nginx&quot;,6059,6))
</code></pre></li>
</ol></li>
<li><p>基于IP的多虚拟主机配置</p>

<pre><code>    server {
        listen       10.0.0.8:80;
        server_name  www.etiantian.org;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
}
</code></pre>

<blockquote>
<p><mark>注意:基于IP修改配置,用平滑重启不能起效, 需要先stop再启动</mark></p>
</blockquote></li>
<li><p>规范化的nginx配置</p>

<ol>
<li><p>将不同页面的配置分别存放在对应的配置文件中</p>

<pre><code>[root@web01 conf]# cp nginx.conf{,.bak.port}
[root@web01 conf]# cat -n nginx.conf
[root@web01 conf]# mkdir extra
[root@web01 conf]# sed -n &#39;10,17p&#39; nginx.conf &gt;extra/www.conf
[root@web01 conf]# sed -n &#39;18,25p&#39; nginx.conf &gt;extra/bbs.conf
[root@web01 conf]# sed -n &#39;26,33p&#39; nginx.conf &gt;extra/blog.conf
[root@web01 conf]# cat extra/*
</code></pre></li>
<li><p>在主配置文件中引入这些配置</p>

<pre><code>[root@web01 conf]# vim nginx.conf
:10,33delete
[root@web01 conf]# cat nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    include extra/www.conf;
    include extra/*;
}
[root@web01 conf]# nginx -t
nginx: the configuration file /application/nginx-1.10.3/conf/nginx.conf syntax is ok
nginx: configuration file /application/nginx-1.10.3/conf/nginx.conf test is successful
[root@web01 conf]# nginx -s reload
</code></pre>

<blockquote>
<p><mark>注意: 不可以全都用&quot;extra/*;&quot;代替, *会按字母顺序先匹配到bbs.conf, 但可以先指定www.conf,其他用*代替</mark></p>
</blockquote></li>
</ol></li>
</ol></li>
<li><p>nginx虚拟主机的别名</p>

<ol>
<li><p>修改主页配置</p>

<pre><code>[root@web01 conf]# vim extra/www.conf
    server {
        listen       80;
        server_name  www.etiantian.org etiantian.org;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
    }
</code></pre>

<ol>
<li><p>修改Windows hosts解析</p>

<pre><code>10.0.0.8   www.etiantian.org bbs.etiantian.org blog.etiantian.org etiantian.org
</code></pre></li>
</ol></li>
</ol></li>
<li><p>nginx处理请求的过程</p>

<blockquote>
<p>不指定端口, 只通过域名访问站点时, nginx会通过DNS解析出的IP, 寻找主机80端口在nginx.conf中相对应的第一个网址响应给浏览器(即使不能对应用户想要的域名), 即:配置文件中基于端口的设置优先于基于域名的设置.</p>
</blockquote></li>
<li><p>nginx状态信息功能模块</p>

<blockquote>
<p>nginx -V  ---查看nginx<mark>配置参数和版本</mark></p>
</blockquote>

<ol>
<li><p>编辑状态信息页面配置</p>

<pre><code>[root@web01 conf]# vim extra/status.conf
server {
    listen       80;
    server_name status.etiantian.org;
    location / {
        stub_status on;
        access_log off;
    }
}
</code></pre></li>
<li><p>修改主配置文件</p>

<pre><code>[root@web01 conf]# sed -i.bak.status &#39;/include.*blog/ a include extra/status.conf;&#39; nginx.conf
[root@web01 conf]# cat nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    include extra/www.conf;
    include extra/bbs.conf;
    include extra/blog.conf;
include extra/status.conf;
}
</code></pre></li>
<li><p>配置文件语法检查与重载</p>

<pre><code>[root@web01 conf]# nginx -t
nginx: the configuration file /application/nginx-1.10.3/conf/nginx.conf syntax is ok
nginx: configuration file /application/nginx-1.10.3/conf/nginx.conf test is successful
[root@web01 conf]# nginx -s reload
</code></pre></li>
<li><p>修改Windows hosts解析</p>

<pre><code>10.0.0.8   status.etiantian.org etiantian.org www.etiantian.org bbs.etiantian.org blog.etiantian.org
</code></pre></li>
</ol></li>
<li><p>nginx如何查看并发数?</p>

<ol>
<li><p>使用状态模块</p>

<blockquote>
<p>官方手册:<a href="http://nginx.org/en/docs/http/ngx_http_stub_status_module.html">http://nginx.org/en/docs/http/ngx_http_stub_status_module.html</a><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/57823511.jpg" alt=""/></p>

<pre><code>Active connections
The current number of active client connections including Waiting connections.
accepts
The total number of accepted client connections.
handled
The total number of handled connections. Generally, the parameter value is the same as accepts unless some resource limits have been reached (for example, the worker_connections limit).
requests
The total number of client requests.
Reading
The current number of connections where nginx is reading the request header.
Writing
The current number of connections where nginx is writing the response back to the client.
Waiting
The current number of idle client connections waiting for a request.
</code></pre>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/10186457.jpg" alt=""/></p>
</blockquote></li>
<li><p>ss -ant|grep -ic estab</p>

<pre><code>[root@web01 conf]# ss -ant|grep -i estab
ESTAB      0      64                 10.0.0.8:22                10.0.0.1:50152
ESTAB      0      0                  10.0.0.8:22                10.0.0.1:50923
[root@web01 conf]# ss -ant|grep -ic estab
2
</code></pre></li>
</ol></li>
<li><p>nginx访问日志</p>

<ol>
<li><p>定义日志的格式与使用方法</p>

<pre><code>[root@web01 conf]# grep -A4 &#39;log_format&#39; nginx.conf.default
    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;

    #access_log  logs/access.log  main;
[root@web01 conf]#
</code></pre>

<ol>
<li><p>编辑主配置文件</p>

<pre><code>[root@web01 conf]# vim nginx.conf
[root@web01 conf]# cat nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;

    access_log  logs/access.log  main; 
    include extra/www.conf;
    include extra/bbs.conf;
    include extra/blog.conf;
    include extra/status.conf;
}
</code></pre>

<blockquote>
<p><mark>说明: 在配置文件中正确定义了日志文件并成功启动nginx之后, 即使日志文件以前不存在也会被创建出来</mark></p>
</blockquote></li>
<li><p>语法检查与重载</p>

<pre><code>[root@web01 conf]# nginx -t
nginx: the configuration file /application/nginx-1.10.3/conf/nginx.conf syntax is ok
nginx: configuration file /application/nginx-1.10.3/conf/nginx.conf test is successful
[root@web01 conf]# nginx -s reload
</code></pre></li>
<li><p>刷新页面并检查日志</p></li>
</ol>

<pre><code>[root@web01 conf]# tail ../logs/access.log
</code></pre></li>
<li><p>日志格式分析</p>

<blockquote>
<p>$remote_addr 远端用户ip地址<br/>
$remote_user 远端用户,默认为空,需要指定<br/>
[$time_local] 服务器本地时间<br/>
$request 请求的起始行---(http请求方法  URI  http协议版本)<br/>
注意:nginx中的URI指的是一个完整网址的顶级域名后面的部分<br/>
$status 状态码<br/>
$body_bytes_sent 响应主体大小--byte<br/>
$http_referer 访问方式(连接跳转 或 域名访问)<br/>
$http_x_forwarded_for 反向代理相关<br/>
$http_user_agent 浏览器软件版本<br/>
说明=====浏览器UA 字串的标准格式为:<br/>
浏览器标识 (操作系统标识; 加密等级标识; 浏览器语言) 渲染引擎标识 版本信息<br/>
在chrome浏览器中, 使用F12打开调试模式, 可以模拟智能终端访问</p>
</blockquote>

<pre><code>10.0.0.1 - - [09/Aug/2017:12:02:52 +0800] &quot;GET / HTTP/1.1&quot; 200 10 &quot;-&quot; &quot;Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Mobile Safari/537.36&quot; &quot;-&quot;
10.0.0.1 - - [09/Aug/2017:01:51:16 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36&quot; &quot;-&quot;
10.0.0.1 - - [09/Aug/2017:09:27:15 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://www.etiantian.org/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36&quot; &quot;-&quot;
</code></pre></li>
</ol></li>
<li><p>日志操作</p>

<ol>
<li><p>压缩日志</p>

<pre><code>access_log  logs/access.log  main gzip buffer=32k flush=5s;
</code></pre>

<blockquote>
<p>查看日志内容命令 zcat zgrep zless</p>
</blockquote></li>
<li><p>手动切割</p>

<blockquote>
<p>注意切割周期</p>
</blockquote>

<pre><code>[root@web01 logs]# mv access.log access_`date -d &quot;-1day&quot; +%F`.log
[root@web01 logs]# ls
access_2017-07-29.log  error.log  nginx.pid
[root@web01 logs]# /application/nginx/sbin/nginx -s reload
[root@web01 logs]# ls
access_2017-07-29.log access.log  error.log  nginx.pid
</code></pre></li>
<li><p>定时任务脚本切割</p>

<blockquote>
<p>通过脚本的方式来实现切割。通过计划任务</p>

<pre><code>vim /server/scripts/cut_nginx_log.sh
#!bin/sh
#nginx目录
Basedir=&quot;/application/nginx&quot;
#日志目录
Nginxlogdir=&quot;$Basedir/logs&quot;
#当天日志文件名前缀
Logname=&quot;access&quot;
#切割后的文件名中的时间格式
Dateformat=`date -d &quot;yesterday&quot; +%Y-%m-%d`
#判断nginx目录是否存在
[ -d $Nginxlogdir ]&amp;&amp; cd $Nginxlogdir||exit 1
#判断nginx是否启动
[ -f ${Nginxlogdir}/nginx.pid ]||exit 1
#判断日志文件是否存在
[ -f ${Logname}.log ]||exit 1
#重命名日志文件==切割
/bin/mv ${Logname}.log ${Dateformat}_${Logname}.log
#向 Nginx 的进程发送 USR1 信号以重新打开日志文件
kill -USR1 $(cat ${Nginxlogdir}/nginx.pid)
</code></pre>

<p>必须向 Nginx 的进程发送 USR1 信号以重新打开日志文件，如果不写的话，Nginx 会继续将日志信息写入 access_[yyyy-MM-dd].log 的那个文件中，这显然是不正确的。</p>
</blockquote>

<pre><code>#nginx日志切割
0 0 * * * /bin/bash /server/scripts/cut_nginx_log.sh &amp;&gt;/dev/null
</code></pre></li>
<li><p>loglocate日志轮询切割</p>

<pre><code>[root@web01 nginx]# vim /etc/logrotate.d/nginx
/application/nginx/logs/access.log /application/nginx/logs/error.log{
notifempty
daily
sharedscripts;
postrotate
/bin/kill -USR1 `/bin/cat /application/nginx/logs/nginx.pid`
endscript
}
</code></pre></li>
</ol></li>
<li><p>location请求定位</p>

<blockquote>
<p>作用是<br/>
官方文档: <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location">http://nginx.org/en/docs/http/ngx_http_core_module.html#location</a><br/>
语法location [ = | ~ | ~* | <sup>~</sup> ] uri { ... }<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/83152961.jpg" alt=""/></p>
</blockquote>

<ol>
<li><p>匹配字符串</p>

<blockquote>
<p>&quot;=&quot; 完全匹配(精确)<br/>
&quot;<sup>~&quot;</sup> 常规匹配, 不检查正则表达式<br/>
&quot;~<em>&quot; 不区分大小写, 可以用正则和!取反<br/>
&quot;~&quot; 区分大小写, 可以用正则!取反<br/>
&quot; &quot; 不指定表示匹配不到有效位置时最后的匹配<br/>
优先级: &quot;=&quot; &gt; &quot;<sup>~&quot;</sup> &gt; &quot;~</em>&quot; &gt; &quot;~&quot; &gt; &quot; &quot;(默认)</p>
</blockquote></li>
<li><p>匹配变量</p>

<blockquote>
<p>官网: <a href="http://nginx.org/en/docs/varindex.html">http://nginx.org/en/docs/varindex.html</a><br/>
常见变量: $request_uri</p>
</blockquote></li>
<li><p>allow和deny</p>

<pre><code>        location ~* /AV/ {
            root   html/www/AV/;
            index  index.html index.htm;
            allow  172.16.1.31/32;
            deny   all;
        }
</code></pre></li>
</ol></li>
<li><p>rewrite重写URI(用于伪静态)</p>

<ol>
<li><p>用途</p>

<blockquote>
<p><a href="http://oldboy.blog.51cto.com/2561410/1774260">http://oldboy.blog.51cto.com/2561410/1774260</a><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/49779301.jpg" alt=""/></p>
</blockquote></li>
<li><p>用法</p>

<blockquote>
<p>语法格式: rewrite RegEx replacement [flag];<br/>
相当于: sed &#39;s#RegEx#replacement#g&#39;<br/>
应用位置: server区块 location区块 if区块</p>
</blockquote></li>
<li><p>Perl正则: (.*)--$n<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/2480791.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/98781645.jpg" alt=""/></p></li>
<li><p>if区块用法</p>

<blockquote>
<p><a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#if">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#if</a><br/>
Example:<br/>
if ($slow) {<br/>
    limit_rate 10k;<br/>
    break;<br/>
}<br/>
Syntax: if (condition) { ... }<br/>
Default:    —<br/>
Context:    server, location</p>
</blockquote></li>
<li><p><a href="http://www.conf%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95">www.conf第一种写法</a></p>

<pre><code>   server {
        listen         80;
        server_name  www.etiantian.org  etiantian.org ;
        if ($host ~* &quot;^etiantian.org$&quot;) {
        rewrite ^/(.*) http://www.etiantian.org/$1 permanent;
        }
        location / {
            root   html/www;
            index  index.html index.htm;
        }
}
</code></pre></li>
<li><p><a href="http://www.conf%E7%AC%AC%E4%BA%8C%E7%A7%8D%E5%86%99%E6%B3%95">www.conf第二种写法</a></p>

<pre><code>   server {
        listen   80;
        server_name etiantian.org ;
        rewrite ^/(.*) http://www.etiantian.org/$1 permanent;
         }
   server {
        listen   80;
        server_name  www.etiantian.org;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
}
</code></pre></li>
</ol></li>
<li><p>Nginx基本认证功能</p>

<pre><code>yum install -y httpd-tools
htpasswd -bc /application/nginx/conf/htpasswd oldboy 123456
chmod 400 /application/nginx/conf/htpasswd
chown www.www /application/nginx/conf/htpasswd
</code></pre>

<blockquote>
<p>有效的配置代码:<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/42809116.jpg" alt=""/></p>
</blockquote>

<blockquote>
<p>修改status.conf作为测试</p>
</blockquote>

<pre><code>server{
    listen  80;
    server_name  status.etiantian.org;
    location / {

    ## status module
    stub_status on;
    access_log   off;

    ## auth module
    auth_basic &quot;root only&quot;;
    auth_basic_user_file /application/nginx/conf/htpasswd;
    }
}
</code></pre>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-11/38166362.jpg" alt=""/></p></li>
<li><p>补充:</p>

<ol>
<li><p>403错误的两种可能情况</p>

<blockquote>
<p>首页文件名不正确<br/>
配置文件阻止策略</p>
</blockquote></li>
<li><p>autoindex自动索引</p>

<blockquote>
<p>首页文件不存在时,如果设置 autoindex on;浏览器就会将站点目录结构解析出来</p>
</blockquote></li>
<li><p>304的含义</p>

<pre><code>10.0.0.1 - - [10/Aug/2017:11:19:38 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36&quot; &quot;-&quot;
</code></pre>

<blockquote>
<p>意味着浏览器使用了缓存来访问站点<br/>
使用Ctrl+F5强制刷新,不使用缓存记录</p>
</blockquote></li>
</ol></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[鸡汤]]></title>
    <link href="http://note.ptzzy.top/15050925305457.html"/>
    <updated>2017-09-11T09:15:30+08:00</updated>
    <id>http://note.ptzzy.top/15050925305457.html</id>
    <content type="html"><![CDATA[
<ol>
<li>智商、情商、胆商可以改变局面；知识、见识、胆识可以改变命运。</li>
<li>见人说人话需要学术，见人说神话需要艺术；见人说鬼话叫做“城府”，见鬼说人话叫做“迂腐”。</li>
<li>以克人之心克己，以容己之心容人。4.大胜必经大忍，大败常因心切。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卌二、KVM]]></title>
    <link href="http://note.ptzzy.top/15050197248657.html"/>
    <updated>2017-09-10T13:02:04+08:00</updated>
    <id>http://note.ptzzy.top/15050197248657.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>为什么需要KVM</p>

<blockquote>
<p>云计算，OpenStack， 亚马逊<br/>
底层采用KVM，其他xen、docker，esxi<br/>
openstack类似cobbler，</p>

<blockquote>
<p>cobbler给kickstart提供web界面<br/>
    OpenStack给KVM提供web界面管理</p>
</blockquote>

<p>企业使用虚拟化要么就是kvm要么就是docker</p>
</blockquote>

<blockquote>
<p>最开始：没钱，全都用软件<br/>
公司有钱：买硬件<br/>
特别有钱：大部分使用软件</p>
</blockquote></li>
<li><p>技术演变</p>

<ol>
<li><p>软件模拟</p>

<blockquote>
<p>软件模拟，理论上可以模拟任何硬件，甚至是不存在的硬件。但是因为这种方式全部是软件模拟硬件，所以非常低效，一般只用于研究测试的场景。采用这种技术的典型产品有Bochs、 QEMU等。</p>
</blockquote></li>
<li><p>虚拟化层翻译</p>

<blockquote>
<p>1.2.1  软件全虚拟化：软件捕获翻译    ========》你和美国人说话需要一个翻译官<br/>
    VMware，有一个专门虚拟化引擎。通过虚拟化引擎，捕获虚拟机的指令，并进行处理，这也是为什么在虚拟机上虽然使用的是物理机一样的指令，但是虚拟机不能对硬件进行操作的原因，比如重启虚拟机不会引起宿主机的重启。这种解决方案也叫软件全虚拟化方案。</p>
</blockquote>

<blockquote>
<p>1.2.2  半虚拟化：改造虚拟机系统内核加虚拟化层翻译  ====》你学了英语和美国人说话<br/>
    xen，对虚拟机的操作系统内核进行改造，使虚拟机自己对特殊的指令进   行更改，然后和虚拟化层一起配合工作，这也是Xen早期一直要使用一个特殊内核的原因，并且不支持Windows系统虚拟化。改造的虚拟机虽然使用上有限制，配置比较麻烦，但是这种方式效率非常高，这种方式也被称为半虚拟化方案。</p>
</blockquote>

<blockquote>
<p>1.2.3  硬件支持的全虚拟化： 硬件支持的虚拟化层翻译 ==》你重生到美国然后和美国人说话<br/>
    2005年， Intel推出了硬件的方案，对CPU指令进行改造，即VT-x。 这种方案因为是基于硬件的，所以效率非常高，这种方案也称为硬件支持的全虚拟化方案。</p>
</blockquote></li>
<li><p>容器虚拟化</p>

<blockquote>
<p>kvm是在操作系统上安装了另外一个操作系统<br/>
docker是在操作系统上启动一个程序</p>
</blockquote>

<blockquote>
<p>容器虚拟化的原理是基于CGroups、 Namespace等技术将进程隔离，每个进程就像一台单独的虚拟机一样，有自己被隔离出来的资源，也有自己的根目录、独立的进程编号、被隔离的内存空间。基于容器的虚拟化可以实现在单一内核上运行多个实例，因此是一个更高效率的虚拟化方式。目前最热的容器虚拟化技术就是Docker。</p>
</blockquote>

<blockquote>
<p>比喻：一个新建的大楼的某层，如果将他改建成住宅，那就需要每个房间都要有厨房，浴室等正常人家必备设施，一层楼估计能做出3户人家；但是改建成宿舍，什么厨房，浴室就建一个就可以，然后每个宿舍的墙可以打个隔断，很节省资源，基本可以隔出20个。</p>
</blockquote></li>
<li><p>使用场景：</p>

<blockquote>
<p>虚拟化使用场景：对资源要求不高的服务，负载均衡，web服务</p>

<p>数据库，NFS存储对IO资源强烈需求的不建议使用虚拟化</p>
</blockquote></li>
</ol></li>
<li><p>KVM简介</p>

<ol>
<li><p>KVM简介<br/>
<strong><mark>KVM(Kernel-based Virtual Machine)</mark></strong></p>

<blockquote>
<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/4181648.jpg" alt=""/></p>
</blockquote>

<p>虚拟化嵌套</p>

<blockquote>
<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/92932098.jpg" alt=""/><br/>
KVM虚拟机=KVM内核模块+QEMU模拟器</p>

<p>KVM只是个内核模块，只提供CPU和内存。所以还使用qemu模拟器模拟IO设备如磁盘、网卡。</p>
</blockquote>

<blockquote>
<p>Libvirt是一套开源的虚拟化的管理工具，主要由3部分组成：<br/>
    一套API的lib库，支持主流的编程语言，包括C、Python、Ruby 等<br/>
    Libvirtd服务<br/>
    命令行工具virsh<br/>
Libvirt可以实现对虚拟机的管理，比如虚拟机的创建、启动、关闭、暂停、恢复、迁移、销毁，以及虚拟机网卡、硬盘、 CPU、内存等多种设备的热添加。</p>
</blockquote></li>
</ol></li>
<li><p>KVM安装</p>

<ol>
<li><p>环境检查</p>

<blockquote>
<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/56943339.jpg" alt=""/></p>

<pre><code>[root@oldboyedu ~]# cat /etc/redhat-release
CentOS Linux release 7.2.1511 (Core) 
[root@oldboyedu ~]# uname -r
3.10.0-327.el7.x86_64
[root@oldboyedu ~]# systemctl status firewalld.service 
● firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)
   Active: inactive (dead)
[root@oldboyedu ~]# getenforce 
Disabled
[root@oldboyedu ~]# hostname -I
10.0.0.201 172.16.1.201 192.168.122.1 
[root@oldboyedu ~]# lsmod |grep kvm
kvm_intel             162153  0 
kvm                   525259  1 kvm_intel
[root@oldboyedu ~]# grep -Eo &#39;(vmx|svm)&#39; /proc/cpuinfo
vmx
</code></pre>
</blockquote></li>
<li><p>安装管理工具</p>

<blockquote>
<pre><code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
yum -y install qemu-kvm qemu-kvm-tools virt-manager libvirt virt-install 
</code></pre>

<p>安装软件包详细说明</p>

<pre><code>[root@KVM ~]# rpm -qa|grep -E &#39;qemu|libvirt|virt&#39;
python-virtinst-0.600.0-29.el6.noarch   # 一套Python的虚拟机安装工具
gpxe-roms-qemu-0.9.7-6.14.el6.noarch    # 虚拟机iPXE的启动固件，支持虚拟机从网络启动
virt-manager-0.9.0-29.el6.x86_64        # 基于Libvirt的图像化虚拟机管理软件，需要图形界面操作系统
qemu-img-0.12.1.2-2.479.el6.x86_64      # 用于操作虚拟机硬盘镜像的创建、查看和格式转化
libvirt-python-0.10.2-54.el6.x86_64     # libvirt为Python提供的API
qemu-kvm-0.12.1.2-2.479.el6.x86_64      # KVM在用户空间运行的程序
qemu-kvm-tools-0.12.1.2-2.479.el6.x86_64
libvirt-0.10.2-54.el6.x86_64            # 用于管理虚拟机，它提供了一套虚拟机操作API
libvirt-client-0.10.2-54.el6.x86_64     # Libvirt的客户端，最重要的功能之一就是就在宿主机关机时可以通知虚拟机也关机，使虚拟机系统正常关机，而不是被强制关机，造成数据丢失
virt-top-1.0.4-3.15.el6.x86_64          # 类似于top命令，查看虚拟机的资源使用情况
virt-what-1.11-1.2.el6.x86_64           # 在虚拟机内部执行，查看虚拟机运行的虚拟化平台
virt-viewer-0.5.6-8.el6.x86_64          # 显示虚拟机的控制台console
</code></pre>
</blockquote></li>
</ol></li>
<li><p>安装KVM虚拟机</p>

<ol>
<li><p>创建磁盘文件</p>

<pre><code>mkdir -p /application/kvm_data
cd /application/kvm_data
qemu-img create -f qcow2 /application/kvm_data/moban.qcow2 20G
</code></pre>

<p>查看虚拟机磁盘的信息</p>

<pre><code>[root@oldboyedu kvm_data]# qemu-img info /application/kvm_data/moban.qcow2
image: /application/kvm_data/moban.qcow2
file format: qcow2
virtual size: 20G (21474836480 bytes)
disk size: 196K
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: false
</code></pre></li>
<li><p>执行安装命令（包括上传系统镜像）</p>

<pre><code>virt-install --virt-type=kvm --name=c72-moban --vcpus=1 -r 1024 -c /application/tools/CentOS7_2.iso --network network=default --graphics vnc,listen=0.0.0.0 --noautoconsole --os-type=linux --os-variant=rhel7 --disk path=/application/kvm_data/moban.qcow2,size=20,format=qcow2
</code></pre>

<p>安装其他虚拟机需要变动的两处：</p>

<pre><code>virt-install --virt-type=kvm --name=xxxxxx --vcpus=1 -r 1024 -c /application/tools/CentOS7_2.iso --network network=default --graphics vnc,listen=0.0.0.0 --noautoconsole --os-type=linux --os-variant=rhel7 --disk path=/application/kvm_data/xxxx.qcow2,size=20,format=qcow2
</code></pre>

<p><em>小知识：</em><br/>
<em>KVM网络默认是NAT模式</em></p>

<p><em>dnsmasq既提供dns解析服务还提供DHCP服务</em></p></li>
<li><p>管理KVM的操作命令</p>

<p>5.3.1 查看KVM虚拟机</p>

<pre><code>[root@oldboyedu kvm_data]# virsh list
 Id    名称                         状态
----------------------------------------------------

[root@oldboyedu kvm_data]# virsh list --all
 Id    名称                         状态
----------------------------------------------------
 -     c72-moban                      关闭
</code></pre>

<p>5.3.2 启动、关闭</p>

<pre><code>[root@oldboyedu kvm_data]# virsh start c72-moban 
域 c72-moban 已开始

正常关闭：virsh shutdown c72-moban 
暴力关机：virsh destroy c72-moban

当然还可以在kvm虚拟机里面执行poweroff
</code></pre>

<p>5.3.3 连接端口</p>

<pre><code>vnc的默认端口5900
如果再安装或者启动一台新的虚拟机，端口就是5901  ==10.0.0.201:5901
如果再安装或者启动一台新的虚拟机，端口就是5902  ==10.0.0.201:5902
…………

[root@oldboyedu kvm_data]# netstat -tunlp|grep 5900
tcp        0      0 0.0.0.0:5900            0.0.0.0:*               LISTEN      3838/qemu-kvm       
[root@oldboyedu kvm_data]# ps -ef|grep 3838
qemu       3838      1 16 11:39 ?        00:01:02 /usr/libexec/qemu-kvm -name c72-moban -S -machine pc-i440fx-rhel7.0.0,accel=kvm,usb=off -cpu Haswell,-hle,-rtm -m 1024 -realtime mlock=off -smp 1,sockets=1,cores=1,threads=1 -uuid 4453daa6-14d3-4a4c-93e1-ccfced1340f4 -no-user-config …………nc 0.0.0.0:0 -vga cirrus -device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x7 -msg timestamp=on
</code></pre>

<p>5.3.4 查看虚拟机的信息</p>

<pre><code>lscpu查看虚拟机的cpu信息

L1d  一级数据缓存
L1i  一级指令缓存
</code></pre>

<p>5.3.5 查看宿主机网卡桥接信息</p>

<pre><code>[root@oldboyedu kvm_data]# brctl show
bridge name bridge id       STP enabled interfaces
virbr0      8000.fe5400b37bac   yes     vnet0
</code></pre>

<p>5.3.6 常用命令汇总    </p>

<blockquote>
<p>生成kvm虚拟机：virt-install<br/>
查看在运行的虚拟机：virsh list<br/>
查看所有虚拟机：virsh list --all<br/>
查看kvm虚拟机配置文件：virsh dumpxml name<br/>
启动kvm虚拟机：virsh start name<br/>
正常关机：virsh shutdown name <br/>
非正常关机（相当于物理机直接拔掉电源）：virsh destroy name<br/>
删除：virsh undefine name（彻底删除，找不回来了，如果想找回来，需要备份/etc/libvirt/qemu的xml文件）<br/>
根据配置文件定义虚拟机：virsh define file-name.xml<br/>
挂起，终止：virsh suspend name<br/>
恢复挂起状态:virsh resume name</p>
</blockquote></li>
</ol></li>
<li><p>磁盘文件格式介绍</p>

<p><a href="http://www.cnblogs.com/feisky/archive/2012/07/03/2575167.html">http://www.cnblogs.com/feisky/archive/2012/07/03/2575167.html</a></p>

<p>主流使用qcow2</p></li>
<li><p>克隆</p>

<ol>
<li><p>复制磁盘文件</p>

<pre><code>[root@oldboyedu kvm_data]# pwd
/application/kvm_data
[root@oldboyedu kvm_data]# ls
moban.qcow2
[root@oldboyedu kvm_data]# cp moban.qcow2 clone.qcow2
</code></pre></li>
<li><p>导出模板机的配置文件并修改</p>

<p>导出模板机的配置</p>

<pre><code>virsh dumpxml c72-moban &gt; clone.xml
cp clone.xml{,.ori}
</code></pre>

<p>第2,3,37,82修改</p>

<pre><code>[root@oldboyedu ~]# diff clone.xml{,.ori}
2,3c2,3
&lt;   &lt;name&gt;c72-clone&lt;/name&gt;
&lt;   &lt;uuid&gt;4453daf6-14d3-4a4c-93e1-ccfced1340f4&lt;/uuid&gt;
---
&gt;   &lt;name&gt;c72-moban&lt;/name&gt;
&gt;   &lt;uuid&gt;4453daa6-14d3-4a4c-93e1-ccfced1340f4&lt;/uuid&gt;
37c37
&lt;       &lt;source file=&#39;/application/kvm_data/clone.qcow2&#39;/&gt;
---
&gt;       &lt;source file=&#39;/application/kvm_data/moban.qcow2&#39;/&gt;
82c82
&lt;       &lt;mac address=&#39;52:54:00:b3:72:ac&#39;/&gt;
---
&gt;       &lt;mac address=&#39;52:54:00:b3:7b:ac&#39;/&gt;
</code></pre></li>
<li><p>导入新的克隆机器</p>

<p>默认kvm的配置文件</p>

<pre><code>[root@oldboyedu ~]# ls /etc/libvirt/qemu
c72-moban.xml  networks
</code></pre>

<p>导入</p>

<pre><code>[root@oldboyedu ~]# virsh define clone.xml
Domain c72-clone defined from clone.xml
</code></pre>

<p>再次查看</p>

<pre><code>[root@oldboyedu ~]# ls /etc/libvirt/qemu
c72-clone.xml  c72-moban.xml  networks
[root@oldboyedu ~]# virsh list --all
 Id    Name                           State
----------------------------------------------------
 2     c72-moban                      running
 -     c72-clone                      shut off
</code></pre></li>
</ol></li>
<li><p>快照</p>

<ol>
<li>创建快照注意事项</li>
</ol>

<blockquote>
<p>磁盘格式要为qcow2<br/>
关机做快照最好，开机也能做快照</p>
</blockquote>

<ol>
<li><p>快照命令</p>

<p>创建快照</p>

<pre><code>virsh snapshot-create-as c72-clone    kuaizhao1
命令   创建快照指令         虚拟机名称     快照名称
</code></pre>

<p>查看快照列表</p>

<pre><code>virsh snapshot-list      c72-clone
命令   查看快照列表指令      虚拟机名称
</code></pre>

<p>查看快照信息</p>

<pre><code>virsh snapshot-info       c72-clone    kuaizhao1
命令   查看指定快照信息指令   虚拟机名称      快照名称
</code></pre>

<p>还原</p>

<pre><code>virsh snapshot-revert     c72-clone    kuaizhao1
命令   还原指定快照指令       虚拟机名称     快照名称
</code></pre>

<p>删除快照</p>

<pre><code>virsh snapshot-delete     c72-clone    kuaizhao1
命令   删除指定快照指令       虚拟机名称     快照名称
</code></pre></li>
</ol></li>
<li><p>图形化管理KVM</p></li>
</ol>

<blockquote>
<h1 id="toc_0">今日总结：</h1>

<ol>
<li>KVM安装</li>
<li>克隆</li>
<li>快照</li>
</ol>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卌一、CentOS 7]]></title>
    <link href="http://note.ptzzy.top/15050196529102.html"/>
    <updated>2017-09-10T13:00:52+08:00</updated>
    <id>http://note.ptzzy.top/15050196529102.html</id>
    <content type="html"><![CDATA[
<ol>
<li>回顾kickstart和cobbler</li>
</ol>

<p>在管理机m01安装kickstart服务端，然后用服务端自动安装了一个新的CentOS系统，然后给这个Vmware虚拟机起了个名字叫cobbler。到此，kickstart课程结束。</p>

<p>第二天，需要安装cobbler服务器，顺便用了昨天我们安装的机器，安装完cobbler服务端，我们又安装一台新系统。</p>

<p>cobbler二大功能：自动安装系统、创建yum仓库</p>

<p>CentOS7 TFTP启动<br/>
systemctl start tftp.socket<br/>
systemctl start tftp.server</p>

<ol>
<li><p>开机启动流程</p>

<blockquote>
<p>init系统：Shell脚本执行的特色：串行执行，从上往下执行<br/>
upstart系统：有依赖的关系的依然串行启动，但是没有依赖关系的就并行启动  initctl start onealert<br/>
systemd：基本上所有服务并行启动</p>
</blockquote></li>
<li><p>三种启动技术对比<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/52142850.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/99741039.jpg" alt=""/></p>

<blockquote>
<p>并发启动原理之一：解决 socket 依赖/端口依赖<br/>
并发启动原理之二：解决 D-Bus 依赖：采用了D-Bus作为程序之间的通信工具，类似消息队列，可以缓存信息。<br/>
并发启动原理之三：解决文件系统依赖：类似autofs机制<br/>
不用的时候就不挂载，用的时候帮你执行mount挂载<br/>
centos7没有按照autofs软件，但是底层实现相同功能<br/>
启动过程：磁盘自检--文件系统自检--挂载<br/>
除了/分区是必须用的，centos7只对开机必须的文件系统进行检查然后挂载。其他非必须分区，用的时候在检查挂载</p>
</blockquote></li>
<li><p>文件系统</p>

<blockquote>
<p>ext2/ext3/ext4  1PB=1024T 1T=1024G<br/>
xfs:专门为大数据设计的系统  格式化成xfs特别快<br/>
LVM的优点：动态增加或减少分区大小，但是会消耗一定的性能</p>
</blockquote></li>
<li><p>CentOS7新增功能</p>

<ol>
<li><p>yum源无需优化了，因此采用mirrorlist功能，自动找到最优的yum仓库</p>

<p>安装vim：</p>

<pre><code>yum -y install vim
</code></pre>

<p>tab补全：</p>

<pre><code>yum install -y bash-completion
</code></pre></li>
<li><p>网卡名称修改</p>

<p>修改内核选项，net.ifnames=0 biosdevname=0</p>

<p>已经安装完系统修改<br/>
<a href="http://oldboy.blog.51cto.com/2561410/1722101">http://oldboy.blog.51cto.com/2561410/1722101</a></p></li>
<li><p>网络管理命令</p>

<p>传统派：ifconfig netstat route   yum -y install net-tools  rpm -ql net-tools<br/>
新星派：ip ss                    yum -y install iproute</p>

<p>新一代的网络管理图形工具：nmtui   (network manager text user interface)</p></li>
<li><p>主机名等配置文件</p>

<p>4.1 主机名配置文件</p>

<blockquote>
<p>CentOS6--&gt; /etc/sysconfig/network<br/>
CentOS7--&gt; /etc/hostname</p>
</blockquote>

<p>CentOS6--&gt; 临时改hostname 主机名  + 永久改 改配置文件<br/>
CentOS7--&gt; hostnamectl</p>

<pre><code>[root@CentOS7 ~]# hostnamectl status
   Static hostname: CentOS7
         Icon name: computer-vm
           Chassis: vm
        Machine ID: 506a64e53f764d36bc96a5321abbf965
           Boot ID: 2944378099d34f43a01c8052ee537bbd
    Virtualization: vmware
  Operating System: CentOS Linux 7 (Core)
       CPE OS Name: cpe:/o:centos:centos:7
            Kernel: Linux 3.10.0-327.el7.x86_64
      Architecture: x86-64

[root@CentOS7 ~]# hostnamectl set-hostname oldboyedu
[root@oldboyedu ~]# cat /etc/hostname 
oldboyedu
</code></pre>

<p>4.2 字符集的配置文件</p>

<blockquote>
<p>CentOS6--&gt; /etc/sysconfig/i18n<br/>
CentOS7--&gt; /etc/locale.conf</p>
</blockquote>

<pre><code>[root@oldboyedu ~]# cat /etc/locale.conf 
LANG=zh_CN.UTF-8
[root@oldboyedu ~]# localectl status
   System Locale: LANG=zh_CN.UTF-8
       VC Keymap: us
      X11 Layout: us
[root@oldboyedu ~]# localectl list-locales 
aa_DJ
aa_DJ.iso88591
aa_DJ.utf8
…………

[root@oldboyedu ~]# localectl set-locale LANG=en_US.UTF-8
[root@oldboyedu ~]# localectl status
   System Locale: LANG=en_US.UTF-8
       VC Keymap: us
      X11 Layout: us
[root@oldboyedu ~]# cat /etc/locale.conf 
LANG=en_US.UTF-8
</code></pre>

<p>4.3  系统时间事情</p>

<pre><code>[root@oldboyedu ~]# timedatectl --help
timedatectl [OPTIONS...] COMMAND ...

Query or change system time and date settings.

[root@oldboyedu ~]# ll -h /etc/localtime
lrwxrwxrwx. 1 root root 35 4月  21 20:02 /etc/localtime -&gt; ../usr/share/zoneinfo/Asia/Shanghai
</code></pre>

<p>4.4 rc.local</p>

<blockquote>
<p>使用CentOS 6 shell脚本开机启动的方法</p>

<pre><code>chmod +x /etc/rc.d/rc.local
</code></pre>
</blockquote>

<p>4.5 运行级别</p>

<pre><code>[root@oldboyedu ~]# systemctl get-default
graphical.target
[root@oldboyedu ~]# systemctl set-default multi-user.target
Removed symlink /etc/systemd/system/default.target.
Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/multi-user.target.
[root@oldboyedu ~]# systemctl get-default
multi-user.target
[root@oldboyedu ~]# systemctl set-default graphical.target
Removed symlink /etc/systemd/system/default.target.
Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/graphical.target.
</code></pre>

<p>4.6 systemd一统天下</p>

<blockquote>
<p>看看从前的runlevel都变成什么样了？</p>

<pre><code>ls -lh /usr/lib/systemd/system/runlevel*.target
</code></pre>
</blockquote>

<blockquote>
<p>所有可用的单元文件存放在/usr/lib/systemd/system/和/etc/systemd/system/目录（后者优先级更高）。</p>

<pre><code>ll -h /etc/systemd/system/default.target
</code></pre>
</blockquote>

<blockquote>
<p>区别6：管理服务<br/>
chkconfig：管理开机自启动<br/>
service  ：服务的开启<br/>
/etc/init.d/：服务的开启</p>
</blockquote>

<blockquote>
<p>systemctl:融合service和chkconfig的功能于一体,兼容SysV和LSB的启动脚本，而且够在进程启动过程中更有效地引导加载服务。。</p>

<p>启动时间优化</p>

<pre><code>systemd-analyze time
systemd-analyze blame
systemd-analyze plot &gt; bootime.svg
</code></pre>
</blockquote></li>
</ol>

<p>学习文档（中文）：<br/>
<a href="http://www.jinbuguo.com/systemd/systemd.service.html">http://www.jinbuguo.com/systemd/systemd.service.html</a><br/>
<a href="https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/7/index.html">https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/7/index.html</a></p></li>
<li><p>服务<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/13610704.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/38773206.jpg" alt=""/></p></li>
</ol>

<blockquote>
<h1 id="toc_0">今日总结</h1>

<ol>
<li>安装系统</li>
<li>复习centos7新功能</li>
<li>熟练掌握centos7命令</li>
</ol>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[四十、自动化安装 (二) -- cobbler]]></title>
    <link href="http://note.ptzzy.top/15050165021812.html"/>
    <updated>2017-09-10T12:08:22+08:00</updated>
    <id>http://note.ptzzy.top/15050165021812.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>自动化的前提是标准化</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/57384517.jpg" alt=""/></p>

<ol>
<li><p>KS自动应答文件</p>

<p>作用：</p>

<blockquote>
<p>将我们手动安装的所有步骤以一个固定的格式写入到这个文件中。从此以后系统的安装程序只需要读取这个文件就可以自动安装系统。</p>
</blockquote>

<blockquote>
<p>anaconda-ks.cfg    anaconda就是安装程序的名字 ks kickstart</p>
</blockquote>

<p>ks文件主要分为三大段：</p>

<blockquote>
<p>命令段（里面的参数排序不分先后）<br/>
包组段（以%packages）一个包组包含若干个rpm包<br/>
脚本段（%post）</p>
</blockquote></li>
<li><p>kickstart自动安装操作系统<br/>
<a href="15050152527420.html">kickstart 自动批量的安装操作系统</a></p></li>
<li><p>cobbler自动安装操作系统</p></li>
</ol></li>
<li><p>使用学校的yum仓库</p>

<pre><code>echo &quot;192.168.14.200 mirrors.aliyun.com&quot; &gt;&gt;/etc/hosts
</code></pre></li>
<li><p>安装cobbler</p>

<pre><code>yum -y install cobbler cobbler-web dhcp tftp-server pykickstart httpd
</code></pre></li>
<li><p>cobbler自检</p>

<pre><code>cobbler check
</code></pre></li>
<li><p>修改配置文件</p>

<pre><code>cp /etc/cobbler/settings{,.ori} 
</code></pre></li>
<li><p>manage_dhcp  cobbler管理DHCP</p></li>
<li><p>pxe_just_once  只能装一次系统，防止重装</p>

<pre><code>sed -i &#39;s/server: 127.0.0.1/server: 172.16.1.121/&#39; /etc/cobbler/settings
sed -i &#39;s/next_server: 127.0.0.1/next_server: 172.16.1.121/&#39; /etc/cobbler/settings
sed -i &#39;s/manage_dhcp: 0/manage_dhcp: 1/&#39; /etc/cobbler/settings
sed -i &#39;s/pxe_just_once: 0/pxe_just_once: 1/&#39; /etc/cobbler/settings
sed -ri &quot;/default_password_crypted/s#(.*: ).*#\1\&quot;`openssl passwd -1 -salt &#39;oldboy&#39; &#39;123456&#39;`\&quot;#&quot; /etc/cobbler/settings
sed -i &#39;s#yes#no#&#39; /etc/xinetd.d/rsync
sed -i &#39;s#yes#no#&#39; /etc/xinetd.d/tftp
</code></pre></li>
<li><p>cobbler get-loaders  下面是免下载方法</p>

<pre><code>tar xfP cobbler_load.tar.gz
</code></pre></li>
<li><p>配置DHCP的配置文件的模板</p>

<pre><code>sed -i &#39;s#192.168.1#172.16.1#g;22d;23d&#39; /etc/cobbler/dhcp.template
</code></pre></li>
<li><p>启动服务</p>

<pre><code>/etc/init.d/xinetd restart
/etc/init.d/cobblerd restart
/etc/init.d/httpd restart
</code></pre></li>
<li><p>只要动了配置文件，就需要执行同步命令</p>

<pre><code>cobbler sync
</code></pre></li>
<li><p>访问网页</p>

<p><a href="http://10.0.0.121/cobbler_web">http://10.0.0.121/cobbler_web</a></p>

<blockquote>
<p>用户名：cobbler<br/>
密码：cobbler</p>
</blockquote></li>
<li><p>导入镜像<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/30801238.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/24513241.jpg" alt=""/></p></li>
<li><p>添加KS文件<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/66316311.jpg" alt=""/><br/>
文件名： CentOS-6.9-x86_64.cfg<br/>
内容：</p>

<pre><code># Cobbler for Kickstart Configurator for CentOS 6.9 by yao zhang
install
url --url=$tree
text
lang en_US.UTF-8
keyboard us
zerombr
bootloader --location=mbr --driveorder=sda --append=&quot;crashkernel=auto rhgb quiet&quot;
$SNIPPET(&#39;network_config&#39;)
timezone --utc Asia/Shanghai
authconfig --enableshadow --passalgo=sha512
rootpw  --iscrypted $default_password_crypted
clearpart --all --initlabel
part /boot --fstype=ext4 --asprimary --size=200
part swap --size=1024
part / --fstype=ext4 --grow --asprimary --size=200
firstboot --disable
selinux --disabled
firewall --disabled
logging --level=info
reboot

%pre
$SNIPPET(&#39;log_ks_pre&#39;)
$SNIPPET(&#39;kickstart_start&#39;)
$SNIPPET(&#39;pre_install_network_config&#39;)
# Enable installation monitoring
$SNIPPET(&#39;pre_anamon&#39;)
%end

%packages
@base
@compat-libraries
@debugging
@development
tree
nmap
sysstat
lrzsz
dos2unix
telnet
%end

%post --nochroot
$SNIPPET(&#39;log_ks_post_nochroot&#39;)
%end

%post
$SNIPPET(&#39;log_ks_post&#39;)
# Start yum configuration
$yum_config_stanza
# End yum configuration
$SNIPPET(&#39;post_install_kernel_options&#39;)
$SNIPPET(&#39;post_install_network_config&#39;)
$SNIPPET(&#39;func_register_if_enabled&#39;)
$SNIPPET(&#39;download_config_files&#39;)
$SNIPPET(&#39;koan_environment&#39;)
$SNIPPET(&#39;redhat_register&#39;)
$SNIPPET(&#39;cobbler_register&#39;)
# Enable post-install boot notification
$SNIPPET(&#39;post_anamon&#39;)
# Start final steps
$SNIPPET(&#39;kickstart_done&#39;)
# End final steps
%end
</code></pre>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/85271879.jpg" alt=""/></p></li>
<li><p>如何用cobbler配置YUM仓库</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/16638440.jpg" alt=""/><br/>
<a href="https://mirrors.aliyun.com/centos/6/os/x86_64/">Indexof/centos/6/os/x86_64/</a><br/>
<a href="https://mirrors.aliyun.com/centos/6/os/x86_64/">https://mirrors.aliyun.com/centos/6/os/x86_64/</a><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/15071045.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/51017309.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/59439046.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/27300956.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/66057658.jpg" alt=""/></p></li>
<li><p>自定义安装操作系统</p>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/3412012.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/29801964.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/99430010.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/3223783.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/40298229.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/15577609.jpg" alt=""/></p></li>
</ol>

<blockquote>
<h1 id="toc_0">今日总结：</h1>

<ol>
<li>kickstart自动安装 ---配置文件保证无误</li>
<li>cobbler安装成功</li>
<li><p>cobbler web界面非常简单，看一下视频补一下步骤</p>

<p>--导入镜像<br/>
--添加ks，并关联镜像<br/>
--同步公网yum仓库功能（把公网rpm下载到cobbler的自己的仓库中），并让镜像关联cobbler的yum仓库（让cobbler的yum仓库提供yum服务）<br/>
--自定义安装操作系统 使用system功能</p></li>
</ol>
</blockquote>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/29141985.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卅九、自动批量的安装操作系统 -- kickstart]]></title>
    <link href="http://note.ptzzy.top/15050152527420.html"/>
    <updated>2017-09-10T11:47:32+08:00</updated>
    <id>http://note.ptzzy.top/15050152527420.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>以前是怎么安装系统的</p>

<blockquote>
<ul>
<li>光盘（ISO文件，光盘的镜像文件）===》每一台物理机都得给一个光驱，如果用外置光驱的话，是不是每台机器都需要插一下</li>
<li>U盘：ISO镜像刻录到U盘==》需要每台机器都需要插一下</li>
<li>并行安装==》网络安装</li>
<li>自动化安装</li>
</ul>
</blockquote>

<blockquote>
<p>备注：（WDS，需要安装在Windows Server 2008）</p>
</blockquote></li>
<li><p>Linux系统批量安装</p>

<blockquote>
<p>kickstart是RedHat公司开源的软件，所以对CentOS兼容性最好。</p>
</blockquote>

<blockquote>
<p>原理：我们将手动安装的所有的详细步骤记录到一个文件中，然后kickstart通过读取这个文件就可以实现自动化安装系统。</p>
</blockquote>

<blockquote>
<p>kickstart是一个项目的名称。没有这个软件。使用者水平是高中以上</p>
</blockquote>

<blockquote>
<p>cobbler是对kickstart的所有组件的封装。使用者水平是初中以上。本质上就是网页版本的kickstart。</p>
</blockquote></li>
<li><p>kickstart的原理及组件<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/52469894.jpg" alt=""/></p></li>
<li><p>安装DHCP服务<br/>
环境准备</p>

<pre><code>[root@m01 ~]# cat /etc/redhat-release 
CentOS release 6.9 (Final)
[root@m01 ~]# uname -r
2.6.32-696.el6.x86_64
[root@m01 ~]# getenforce 
Disabled
[root@m01 ~]# /etc/init.d/iptables status
iptables: Firewall is not running.
[root@m01 ~]# hostname -I
10.0.0.61 172.16.1.61 
[root@m01 ~]# netstat -tunlp|grep 80  #==&gt; 没有80端口占用
[root@m01 ~]# echo &quot;192.168.14.200 mirrors.aliyun.com&quot; &gt;&gt;/etc/hosts
</code></pre>

<p>安装DHCP</p>

<pre><code>[root@m01 ~]#  yum -y install dhcp
</code></pre>

<p>配置DHCP</p>

<pre><code>cat &gt;&gt;/etc/dhcp/dhcpd.conf&lt;&lt;EOF
subnet 172.16.1.0 netmask 255.255.255.0 {
        range 172.16.1.120 172.16.1.200;
        option subnet-mask 255.255.255.0;
        default-lease-time 21600;
        max-lease-time 43200;
        next-server 172.16.1.61;
        filename &quot;/pxelinux.0&quot;;
}
EOF
</code></pre>

<p>启动dhcp查看日志</p>

<pre><code>[root@m01 ~]# /etc/init.d/dhcpd start
Starting dhcpd:                                            [  OK  ]
[root@m01 ~]# netstat -tunlp|grep dhcp
udp        0      0 0.0.0.0:67                  0.0.0.0:*                               88874/dhcpd         
[root@m01 ~]#

[root@m01 ~]# tailf /var/log/messages
</code></pre>

<p>DHCP服务对kickstart系统的影响程度</p>

<p>新建空白虚拟机，建完后做快照。<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/33358046.jpg" alt=""/><br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/88796927.jpg" alt=""/></p>

<p>TFTP没有最终报错<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/36984203.jpg" alt=""/></p></li>
<li><p>安装TFTP服务</p>

<p>安装</p>

<pre><code>[root@m01 ~]# yum -y install tftp-server
</code></pre>

<p>配置</p>

<pre><code>sed -i &#39;14s#yes#no#&#39; /etc/xinetd.d/tftp
</code></pre>

<p>启动</p>

<pre><code>/etc/init.d/xinetd restart
[root@m01 ~]# netstat -tunlp|grep 69
udp        0      0 0.0.0.0:69                  0.0.0.0:*                               90419/xinetd  
</code></pre>

<p>TFTP服务对kickstart系统的影响程度<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/55045879.jpg" alt=""/></p>

<p>上面报错是在TFTP服务的根目录找不到启动文件pxelinux.0</p>

<pre><code>[root@m01 ~]# cd /var/lib/tftpboot/ # TFTP服务的根目录
[root@m01 tftpboot]# ls
[root@m01 tftpboot]#
[root@m01 ~]# yum -y install syslinux  # 为了找到pxelinux.0所以下载这个包
[root@m01 ~]# cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/
</code></pre>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/13240529.jpg" alt=""/></p>

<blockquote>
<p>上面的错误是因为pxelinux.0这个小系统的配置文件（default）不存在，或者文件名不对</p>
</blockquote>

<p>如何找到这个配置文件</p>

<blockquote>
<p>第一步：挂载镜像</p>
</blockquote>

<p><img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/63390276.jpg" alt=""/></p>

<blockquote>
<p>第二步</p>
</blockquote>

<pre><code>[root@m01 ~]# mkdir -p /var/www/html/CentOS6.9
[root@m01 ~]# mount /dev/cdrom /var/www/html/CentOS6.9
mount: block device /dev/sr0 is write-protected, mounting read-only
</code></pre>

<blockquote>
<p>第三步：从镜像中找到相关的配置文件</p>
</blockquote>

<pre><code>cp -a /var/www/html/CentOS6.9/isolinux/* /var/lib/tftpboot/
mkdir -p /var/lib/tftpboot/pxelinux.cfg
cp /var/www/html/CentOS6.9/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default
</code></pre></li>
<li><p>手动网络安装系统</p>

<p>自动化安装操作系统，如果弹出下面图片，属于一种错误<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/46803619.jpg" alt=""/><br/>
你得某个配置文件有没有指明选择哪块</p>

<p>在配置DHCP获取IP地址时<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/63278413.jpg" alt=""/></p>

<p>碰到错误2<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/87541235.jpg" alt=""/><br/>
核心：找不到DHCP服务端<br/>
情况1：选择网卡错了，选成eth0<br/>
情况2：<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/58027147.jpg" alt=""/>颠倒</p></li>
<li><p>安装HTTP服务<br/>
作用1：提供自动应答文件下载<br/>
作用2：提供安装系统所需的所有rpm包下载</p>

<pre><code>[root@m01 ~]# yum -y install httpd
[root@m01 ~]# /etc/init.d/httpd restart
</code></pre>

<p>检查步骤</p>

<pre><code>http://10.0.0.61/CentOS6.9/
curl http://172.16.1.61/CentOS6.9/
</code></pre>

<p>web服务不正常或者URL地址不正确会出现下面的问题<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/24466191.jpg" alt=""/></p>

<p>如果自动化安装出现上面的报错</p></li>
<li><p>补充知识点：default配置文件</p>

<pre><code>[root@m01 tftpboot]# pwd
/var/lib/tftpboot
[root@m01 tftpboot]# cd pxelinux.cfg/
[root@m01 pxelinux.cfg]# vim default
</code></pre></li>
<li><p>不该出现的错误<br/>
<img src="http://ovt17vn7k.bkt.clouddn.com/17-9-10/41992775.jpg" alt=""/><br/>
报错原因：selinux没关<br/>
<a href="http://blog.oldboyedu.com/autoinstall-kickstart/">http://blog.oldboyedu.com/autoinstall-kickstart/</a></p></li>
</ol>

<blockquote>
<p>今日总结：<br/>
1. kickstart的三大组件的作用，能描述图片内容<br/>
2. 安装3大组件，配置<br/>
3. 重点是掌握排错技能<br/>
4. 具体的配置文件的说明见<a href="http://blog.oldboyedu.com/autoinstall-kickstart/">http://blog.oldboyedu.com/autoinstall-kickstart/</a></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
